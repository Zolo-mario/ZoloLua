//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\91018\Documents\GitHub\zlua\projects\zlua\Compiler\Lua.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace zlua.Compiler {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class LuaParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, NotKW=35, LenKW=36, MinusKW=37, MulKW=38, 
		DivKW=39, ModKW=40, AddKW=41, LtKW=42, MtKW=43, LeKW=44, MeKW=45, NeKW=46, 
		EqKW=47, NAME=48, NORMALSTRING=49, CHARSTRING=50, LONGSTRING=51, INT=52, 
		HEX=53, FLOAT=54, HEX_FLOAT=55, COMMENT=56, LINE_COMMENT=57, WS=58, SHEBANG=59;
	public const int
		RULE_chunk = 0, RULE_block = 1, RULE_retstat = 2, RULE_stat = 3, RULE_elseifBlock = 4, 
		RULE_elseBlock = 5, RULE_funcname = 6, RULE_dotName = 7, RULE_colonName = 8, 
		RULE_varlist = 9, RULE_namelist = 10, RULE_explist = 11, RULE_exp = 12, 
		RULE_opUnary = 13, RULE_opMulOrDivOrMod = 14, RULE_opAddOrSub = 15, RULE_opCmp = 16, 
		RULE_prefixexp = 17, RULE_prefixexp0 = 18, RULE_prefixexp1 = 19, RULE_functioncall = 20, 
		RULE_var = 21, RULE_indexer = 22, RULE_nameAndArgs = 23, RULE_args = 24, 
		RULE_functiondef = 25, RULE_funcbody = 26, RULE_parlist = 27, RULE_tableconstructor = 28, 
		RULE_fieldlist = 29, RULE_field = 30, RULE_fieldsep = 31, RULE_number = 32, 
		RULE_string = 33;
	public static readonly string[] ruleNames = {
		"chunk", "block", "retstat", "stat", "elseifBlock", "elseBlock", "funcname", 
		"dotName", "colonName", "varlist", "namelist", "explist", "exp", "opUnary", 
		"opMulOrDivOrMod", "opAddOrSub", "opCmp", "prefixexp", "prefixexp0", "prefixexp1", 
		"functioncall", "var", "indexer", "nameAndArgs", "args", "functiondef", 
		"funcbody", "parlist", "tableconstructor", "fieldlist", "field", "fieldsep", 
		"number", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "'return'", "';'", "'='", "'break'", "'do'", "'end'", "'while'", 
		"'repeat'", "'until'", "'if'", "'then'", "'for'", "','", "'in'", "'function'", 
		"'local'", "'elseif'", "'else'", "'.'", "':'", "'nil'", "'false'", "'true'", 
		"'...'", "'^'", "'..'", "'and'", "'or'", "'('", "')'", "'['", "']'", "'{'", 
		"'}'", "'not'", "'#'", "'-'", "'*'", "'/'", "'%'", "'+'", "'<'", "'>'", 
		"'<='", "'>='", "'~='", "'=='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "NotKW", 
		"LenKW", "MinusKW", "MulKW", "DivKW", "ModKW", "AddKW", "LtKW", "MtKW", 
		"LeKW", "MeKW", "NeKW", "EqKW", "NAME", "NORMALSTRING", "CHARSTRING", 
		"LONGSTRING", "INT", "HEX", "FLOAT", "HEX_FLOAT", "COMMENT", "LINE_COMMENT", 
		"WS", "SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lua.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LuaParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ChunkContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(LuaParser.Eof, 0); }
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_chunk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; block();
			State = 69; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public RetstatContext retstat() {
			return GetRuleContext<RetstatContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__4) | (1L << T__6) | (1L << T__7) | (1L << T__9) | (1L << T__11) | (1L << T__14) | (1L << T__15) | (1L << T__28) | (1L << NAME))) != 0)) {
				{
				{
				State = 71; stat();
				}
				}
				State = 76;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 78;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__0) {
				{
				State = 77; retstat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetstatContext : ParserRuleContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public RetstatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retstat; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetstat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetstatContext retstat() {
		RetstatContext _localctx = new RetstatContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_retstat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(T__0);
			State = 82;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__28) | (1L << T__32) | (1L << NotKW) | (1L << LenKW) | (1L << MinusKW) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
				{
				State = 81; explist();
				}
			}

			State = 85;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 84; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	 
		public StatContext() { }
		public virtual void CopyFrom(StatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EmptyStatContext : StatContext {
		public EmptyStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStatContext : StatContext {
		public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public AssignStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallStatContext : StatContext {
		public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public FunctionCallStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatContext : StatContext {
		public BreakStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoStatContext : StatContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DoStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatContext : StatContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RepeatStatContext : StatContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public RepeatStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatContext : StatContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseifBlockContext[] elseifBlock() {
			return GetRuleContexts<ElseifBlockContext>();
		}
		public ElseifBlockContext elseifBlock(int i) {
			return GetRuleContext<ElseifBlockContext>(i);
		}
		public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForNmericStatContext : StatContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForNmericStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNmericStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForGenericStatContext : StatContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForGenericStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForGenericStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionDefStatContext : StatContext {
		public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctionDefStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LocalFunctionDefStatContext : StatContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public LocalFunctionDefStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalFunctionDefStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LocalDeclarationStatContext : StatContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public LocalDeclarationStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalDeclarationStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_stat);
		int _la;
		try {
			State = 160;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				_localctx = new EmptyStatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 87; Match(T__1);
				}
				break;

			case 2:
				_localctx = new AssignStatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 88; varlist();
				State = 89; Match(T__2);
				State = 90; explist();
				}
				break;

			case 3:
				_localctx = new FunctionCallStatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 92; functioncall();
				}
				break;

			case 4:
				_localctx = new BreakStatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 93; Match(T__3);
				}
				break;

			case 5:
				_localctx = new DoStatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 94; Match(T__4);
				State = 95; block();
				State = 96; Match(T__5);
				}
				break;

			case 6:
				_localctx = new WhileStatContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 98; Match(T__6);
				State = 99; exp(0);
				State = 100; Match(T__4);
				State = 101; block();
				State = 102; Match(T__5);
				}
				break;

			case 7:
				_localctx = new RepeatStatContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 104; Match(T__7);
				State = 105; block();
				State = 106; Match(T__8);
				State = 107; exp(0);
				}
				break;

			case 8:
				_localctx = new IfStatContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 109; Match(T__9);
				State = 110; exp(0);
				State = 111; Match(T__10);
				State = 112; block();
				State = 116;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__16) {
					{
					{
					State = 113; elseifBlock();
					}
					}
					State = 118;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 120;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__17) {
					{
					State = 119; elseBlock();
					}
				}

				State = 122; Match(T__5);
				}
				break;

			case 9:
				_localctx = new ForNmericStatContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 124; Match(T__11);
				State = 125; Match(NAME);
				State = 126; Match(T__2);
				State = 127; exp(0);
				State = 128; Match(T__12);
				State = 129; exp(0);
				State = 132;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__12) {
					{
					State = 130; Match(T__12);
					State = 131; exp(0);
					}
				}

				State = 134; Match(T__4);
				State = 135; block();
				State = 136; Match(T__5);
				}
				break;

			case 10:
				_localctx = new ForGenericStatContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 138; Match(T__11);
				State = 139; namelist();
				State = 140; Match(T__13);
				State = 141; exp(0);
				State = 142; Match(T__4);
				State = 143; block();
				State = 144; Match(T__5);
				}
				break;

			case 11:
				_localctx = new FunctionDefStatContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 146; Match(T__14);
				State = 147; funcname();
				State = 148; funcbody();
				}
				break;

			case 12:
				_localctx = new LocalFunctionDefStatContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 150; Match(T__15);
				State = 151; Match(T__14);
				State = 152; Match(NAME);
				State = 153; funcbody();
				}
				break;

			case 13:
				_localctx = new LocalDeclarationStatContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 154; Match(T__15);
				State = 155; namelist();
				State = 158;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__2) {
					{
					State = 156; Match(T__2);
					State = 157; explist();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifBlockContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseifBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifBlockContext elseifBlock() {
		ElseifBlockContext _localctx = new ElseifBlockContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_elseifBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(T__16);
			State = 163; exp(0);
			State = 164; Match(T__10);
			State = 165; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(T__17);
			State = 168; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public DotNameContext[] dotName() {
			return GetRuleContexts<DotNameContext>();
		}
		public DotNameContext dotName(int i) {
			return GetRuleContext<DotNameContext>(i);
		}
		public ColonNameContext colonName() {
			return GetRuleContext<ColonNameContext>(0);
		}
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_funcname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(NAME);
			State = 174;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__18) {
				{
				{
				State = 171; dotName();
				}
				}
				State = 176;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 178;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__19) {
				{
				State = 177; colonName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public DotNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotNameContext dotName() {
		DotNameContext _localctx = new DotNameContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_dotName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(T__18);
			State = 181; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColonNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public ColonNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colonName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColonName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColonNameContext colonName() {
		ColonNameContext _localctx = new ColonNameContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_colonName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; Match(T__19);
			State = 184; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_varlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; var();
			State = 191;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__12) {
				{
				{
				State = 187; Match(T__12);
				State = 188; var();
				}
				}
				State = 193;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(LuaParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(LuaParser.NAME, i);
		}
		public NamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamelistContext namelist() {
		NamelistContext _localctx = new NamelistContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_namelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(NAME);
			State = 199;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 195; Match(T__12);
					State = 196; Match(NAME);
					}
					} 
				}
				State = 201;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_explist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; exp(0);
			State = 207;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__12) {
				{
				{
				State = 203; Match(T__12);
				State = 204; exp(0);
				}
				}
				State = 209;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NilExpContext : ExpContext {
		public NilExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNilExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FalseExpContext : ExpContext {
		public FalseExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalseExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrueExpContext : ExpContext {
		public TrueExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrueExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExpContext : ExpContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NumberExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringExpContext : ExpContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public StringExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarargExpContext : ExpContext {
		public VarargExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarargExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionDefExpContext : ExpContext {
		public FunctiondefContext functiondef() {
			return GetRuleContext<FunctiondefContext>(0);
		}
		public FunctionDefExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixexpExpContext : ExpContext {
		public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		public PrefixexpExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixexpExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableCtorExpContext : ExpContext {
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public TableCtorExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableCtorExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowExpContext : ExpContext {
		public ExpContext lhs;
		public ExpContext rhs;
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public PowExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpContext : ExpContext {
		public OpUnaryContext opUnary() {
			return GetRuleContext<OpUnaryContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public UnaryExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulOrDivOrModExpContext : ExpContext {
		public ExpContext lhs;
		public ExpContext rhs;
		public OpMulOrDivOrModContext opMulOrDivOrMod() {
			return GetRuleContext<OpMulOrDivOrModContext>(0);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public MulOrDivOrModExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulOrDivOrModExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddOrSubExpContext : ExpContext {
		public ExpContext lhs;
		public ExpContext rhs;
		public OpAddOrSubContext opAddOrSub() {
			return GetRuleContext<OpAddOrSubContext>(0);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public AddOrSubExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOrSubExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatExpContext : ExpContext {
		public ExpContext lhs;
		public ExpContext rhs;
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ConcatExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareExpContext : ExpContext {
		public ExpContext lhs;
		public ExpContext rhs;
		public OpCmpContext opCmp() {
			return GetRuleContext<OpCmpContext>(0);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public CompareExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpContext : ExpContext {
		public ExpContext lhs;
		public ExpContext rhs;
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public AndExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpContext : ExpContext {
		public ExpContext lhs;
		public ExpContext rhs;
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OrExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(_ctx, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__20:
				{
				_localctx = new NilExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 211; Match(T__20);
				}
				break;
			case T__21:
				{
				_localctx = new FalseExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 212; Match(T__21);
				}
				break;
			case T__22:
				{
				_localctx = new TrueExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 213; Match(T__22);
				}
				break;
			case INT:
			case HEX:
			case FLOAT:
			case HEX_FLOAT:
				{
				_localctx = new NumberExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 214; number();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				{
				_localctx = new StringExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 215; @string();
				}
				break;
			case T__23:
				{
				_localctx = new VarargExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 216; Match(T__23);
				}
				break;
			case T__14:
				{
				_localctx = new FunctionDefExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 217; functiondef();
				}
				break;
			case T__28:
			case NAME:
				{
				_localctx = new PrefixexpExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 218; prefixexp();
				}
				break;
			case T__32:
				{
				_localctx = new TableCtorExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 219; tableconstructor();
				}
				break;
			case NotKW:
			case LenKW:
			case MinusKW:
				{
				_localctx = new UnaryExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 220; opUnary();
				State = 221; exp(7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 251;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 249;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
					case 1:
						{
						_localctx = new PowExpContext(new ExpContext(_parentctx, _parentState));
						((PowExpContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 225;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 226; Match(T__24);
						State = 227; ((PowExpContext)_localctx).rhs = exp(8);
						}
						break;

					case 2:
						{
						_localctx = new MulOrDivOrModExpContext(new ExpContext(_parentctx, _parentState));
						((MulOrDivOrModExpContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 228;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 229; opMulOrDivOrMod();
						State = 230; ((MulOrDivOrModExpContext)_localctx).rhs = exp(7);
						}
						break;

					case 3:
						{
						_localctx = new AddOrSubExpContext(new ExpContext(_parentctx, _parentState));
						((AddOrSubExpContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 232;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 233; opAddOrSub();
						State = 234; ((AddOrSubExpContext)_localctx).rhs = exp(6);
						}
						break;

					case 4:
						{
						_localctx = new ConcatExpContext(new ExpContext(_parentctx, _parentState));
						((ConcatExpContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 236;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 237; Match(T__25);
						State = 238; ((ConcatExpContext)_localctx).rhs = exp(4);
						}
						break;

					case 5:
						{
						_localctx = new CompareExpContext(new ExpContext(_parentctx, _parentState));
						((CompareExpContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 239;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 240; opCmp();
						State = 241; ((CompareExpContext)_localctx).rhs = exp(4);
						}
						break;

					case 6:
						{
						_localctx = new AndExpContext(new ExpContext(_parentctx, _parentState));
						((AndExpContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 243;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 244; Match(T__26);
						State = 245; ((AndExpContext)_localctx).rhs = exp(3);
						}
						break;

					case 7:
						{
						_localctx = new OrExpContext(new ExpContext(_parentctx, _parentState));
						((OrExpContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 246;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 247; Match(T__27);
						State = 248; ((OrExpContext)_localctx).rhs = exp(2);
						}
						break;
					}
					} 
				}
				State = 253;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OpUnaryContext : ParserRuleContext {
		public ITerminalNode NotKW() { return GetToken(LuaParser.NotKW, 0); }
		public ITerminalNode LenKW() { return GetToken(LuaParser.LenKW, 0); }
		public ITerminalNode MinusKW() { return GetToken(LuaParser.MinusKW, 0); }
		public OpUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opUnary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpUnaryContext opUnary() {
		OpUnaryContext _localctx = new OpUnaryContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_opUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NotKW) | (1L << LenKW) | (1L << MinusKW))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpMulOrDivOrModContext : ParserRuleContext {
		public ITerminalNode MulKW() { return GetToken(LuaParser.MulKW, 0); }
		public ITerminalNode DivKW() { return GetToken(LuaParser.DivKW, 0); }
		public ITerminalNode ModKW() { return GetToken(LuaParser.ModKW, 0); }
		public OpMulOrDivOrModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opMulOrDivOrMod; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpMulOrDivOrMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpMulOrDivOrModContext opMulOrDivOrMod() {
		OpMulOrDivOrModContext _localctx = new OpMulOrDivOrModContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_opMulOrDivOrMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MulKW) | (1L << DivKW) | (1L << ModKW))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpAddOrSubContext : ParserRuleContext {
		public ITerminalNode AddKW() { return GetToken(LuaParser.AddKW, 0); }
		public ITerminalNode MinusKW() { return GetToken(LuaParser.MinusKW, 0); }
		public OpAddOrSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opAddOrSub; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpAddOrSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpAddOrSubContext opAddOrSub() {
		OpAddOrSubContext _localctx = new OpAddOrSubContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_opAddOrSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			_la = _input.La(1);
			if ( !(_la==MinusKW || _la==AddKW) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpCmpContext : ParserRuleContext {
		public ITerminalNode LtKW() { return GetToken(LuaParser.LtKW, 0); }
		public ITerminalNode MtKW() { return GetToken(LuaParser.MtKW, 0); }
		public ITerminalNode LeKW() { return GetToken(LuaParser.LeKW, 0); }
		public ITerminalNode MeKW() { return GetToken(LuaParser.MeKW, 0); }
		public ITerminalNode NeKW() { return GetToken(LuaParser.NeKW, 0); }
		public ITerminalNode EqKW() { return GetToken(LuaParser.EqKW, 0); }
		public OpCmpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opCmp; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpCmp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpCmpContext opCmp() {
		OpCmpContext _localctx = new OpCmpContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_opCmp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LtKW) | (1L << MtKW) | (1L << LeKW) | (1L << MeKW) | (1L << NeKW) | (1L << EqKW))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixexpContext : ParserRuleContext {
		public Prefixexp0Context prefixexp0() {
			return GetRuleContext<Prefixexp0Context>(0);
		}
		public Prefixexp1Context[] prefixexp1() {
			return GetRuleContexts<Prefixexp1Context>();
		}
		public Prefixexp1Context prefixexp1(int i) {
			return GetRuleContext<Prefixexp1Context>(i);
		}
		public PrefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixexpContext prefixexp() {
		PrefixexpContext _localctx = new PrefixexpContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_prefixexp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; prefixexp0();
			State = 266;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 263; prefixexp1();
					}
					} 
				}
				State = 268;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefixexp0Context : ParserRuleContext {
		public Prefixexp0Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp0; } }
	 
		public Prefixexp0Context() { }
		public virtual void CopyFrom(Prefixexp0Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class NameP0Context : Prefixexp0Context {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public NameP0Context(Prefixexp0Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameP0(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracedExpP1Context : Prefixexp0Context {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BracedExpP1Context(Prefixexp0Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracedExpP1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prefixexp0Context prefixexp0() {
		Prefixexp0Context _localctx = new Prefixexp0Context(_ctx, State);
		EnterRule(_localctx, 36, RULE_prefixexp0);
		try {
			State = 274;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NAME:
				_localctx = new NameP0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 269; Match(NAME);
				}
				break;
			case T__28:
				_localctx = new BracedExpP1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 270; Match(T__28);
				State = 271; exp(0);
				State = 272; Match(T__29);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefixexp1Context : ParserRuleContext {
		public Prefixexp1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp1; } }
	 
		public Prefixexp1Context() { }
		public virtual void CopyFrom(Prefixexp1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class IndexerP1Context : Prefixexp1Context {
		public IndexerContext indexer() {
			return GetRuleContext<IndexerContext>(0);
		}
		public IndexerP1Context(Prefixexp1Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexerP1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameAndArgsP1Context : Prefixexp1Context {
		public NameAndArgsContext nameAndArgs() {
			return GetRuleContext<NameAndArgsContext>(0);
		}
		public NameAndArgsP1Context(Prefixexp1Context context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameAndArgsP1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prefixexp1Context prefixexp1() {
		Prefixexp1Context _localctx = new Prefixexp1Context(_ctx, State);
		EnterRule(_localctx, 38, RULE_prefixexp1);
		try {
			State = 278;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__18:
			case T__30:
				_localctx = new IndexerP1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 276; indexer();
				}
				break;
			case T__19:
			case T__28:
			case T__32:
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				_localctx = new NameAndArgsP1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 277; nameAndArgs();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		public NameAndArgsContext nameAndArgs() {
			return GetRuleContext<NameAndArgsContext>(0);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_functioncall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; prefixexp();
			State = 281; nameAndArgs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
	 
		public VarContext() { }
		public virtual void CopyFrom(VarContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NameLvalueContext : VarContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public NameLvalueContext(VarContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameLvalue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexerLvalueContext : VarContext {
		public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		public IndexerContext indexer() {
			return GetRuleContext<IndexerContext>(0);
		}
		public IndexerLvalueContext(VarContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexerLvalue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_var);
		try {
			State = 287;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				_localctx = new NameLvalueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 283; Match(NAME);
				}
				break;

			case 2:
				_localctx = new IndexerLvalueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 284; prefixexp();
				State = 285; indexer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexerContext : ParserRuleContext {
		public IndexerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer; } }
	 
		public IndexerContext() { }
		public virtual void CopyFrom(IndexerContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BracketIndexerContext : IndexerContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BracketIndexerContext(IndexerContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketIndexer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotIndexerContext : IndexerContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public DotIndexerContext(IndexerContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotIndexer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexerContext indexer() {
		IndexerContext _localctx = new IndexerContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_indexer);
		try {
			State = 295;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__30:
				_localctx = new BracketIndexerContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 289; Match(T__30);
				State = 290; exp(0);
				State = 291; Match(T__31);
				}
				break;
			case T__18:
				_localctx = new DotIndexerContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 293; Match(T__18);
				State = 294; Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameAndArgsContext : ParserRuleContext {
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public NameAndArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameAndArgs; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameAndArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameAndArgsContext nameAndArgs() {
		NameAndArgsContext _localctx = new NameAndArgsContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_nameAndArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__19) {
				{
				State = 297; Match(T__19);
				State = 298; Match(NAME);
				}
			}

			State = 301; args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
	 
		public ArgsContext() { }
		public virtual void CopyFrom(ArgsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BracedArgsContext : ArgsContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public BracedArgsContext(ArgsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracedArgs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TablectorArgsContext : ArgsContext {
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public TablectorArgsContext(ArgsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablectorArgs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringArgsContext : ArgsContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public StringArgsContext(ArgsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_args);
		int _la;
		try {
			State = 310;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__28:
				_localctx = new BracedArgsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 303; Match(T__28);
				State = 305;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__28) | (1L << T__32) | (1L << NotKW) | (1L << LenKW) | (1L << MinusKW) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
					{
					State = 304; explist();
					}
				}

				State = 307; Match(T__29);
				}
				break;
			case T__32:
				_localctx = new TablectorArgsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 308; tableconstructor();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				_localctx = new StringArgsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 309; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefContext : ParserRuleContext {
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondef; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefContext functiondef() {
		FunctiondefContext _localctx = new FunctiondefContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; Match(T__14);
			State = 313; funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncbodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		public FuncbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcbody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncbodyContext funcbody() {
		FuncbodyContext _localctx = new FuncbodyContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_funcbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; Match(T__28);
			State = 317;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__23 || _la==NAME) {
				{
				State = 316; parlist();
				}
			}

			State = 319; Match(T__29);
			State = 320; block();
			State = 321; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParlistContext : ParserRuleContext {
		public ParlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parlist; } }
	 
		public ParlistContext() { }
		public virtual void CopyFrom(ParlistContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamelistParlistContext : ParlistContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public NamelistParlistContext(ParlistContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamelistParlist(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarargParlistContext : ParlistContext {
		public VarargParlistContext(ParlistContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarargParlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParlistContext parlist() {
		ParlistContext _localctx = new ParlistContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_parlist);
		int _la;
		try {
			State = 329;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NAME:
				_localctx = new NamelistParlistContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 323; namelist();
				State = 326;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__12) {
					{
					State = 324; Match(T__12);
					State = 325; Match(T__23);
					}
				}

				}
				break;
			case T__23:
				_localctx = new VarargParlistContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 328; Match(T__23);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstructorContext : ParserRuleContext {
		public FieldlistContext fieldlist() {
			return GetRuleContext<FieldlistContext>(0);
		}
		public TableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstructor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableconstructorContext tableconstructor() {
		TableconstructorContext _localctx = new TableconstructorContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_tableconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331; Match(T__32);
			State = 333;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__28) | (1L << T__30) | (1L << T__32) | (1L << NotKW) | (1L << LenKW) | (1L << MinusKW) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
				{
				State = 332; fieldlist();
				}
			}

			State = 335; Match(T__33);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsepContext[] fieldsep() {
			return GetRuleContexts<FieldsepContext>();
		}
		public FieldsepContext fieldsep(int i) {
			return GetRuleContext<FieldsepContext>(i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_fieldlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; field();
			State = 343;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 338; fieldsep();
					State = 339; field();
					}
					} 
				}
				State = 345;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			}
			State = 347;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__1 || _la==T__12) {
				{
				State = 346; fieldsep();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_field);
		try {
			State = 359;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 349; Match(T__30);
				State = 350; exp(0);
				State = 351; Match(T__31);
				State = 352; Match(T__2);
				State = 353; exp(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 355; Match(NAME);
				State = 356; Match(T__2);
				State = 357; exp(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 358; exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsepContext : ParserRuleContext {
		public FieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsep; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsepContext fieldsep() {
		FieldsepContext _localctx = new FieldsepContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_fieldsep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			_la = _input.La(1);
			if ( !(_la==T__1 || _la==T__12) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(LuaParser.INT, 0); }
		public ITerminalNode HEX() { return GetToken(LuaParser.HEX, 0); }
		public ITerminalNode FLOAT() { return GetToken(LuaParser.FLOAT, 0); }
		public ITerminalNode HEX_FLOAT() { return GetToken(LuaParser.HEX_FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode NORMALSTRING() { return GetToken(LuaParser.NORMALSTRING, 0); }
		public ITerminalNode CHARSTRING() { return GetToken(LuaParser.CHARSTRING, 0); }
		public ITerminalNode LONGSTRING() { return GetToken(LuaParser.LONGSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 8);

		case 1: return Precpred(_ctx, 6);

		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);

		case 4: return Precpred(_ctx, 3);

		case 5: return Precpred(_ctx, 2);

		case 6: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3=\x172\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x3\x2\x3\x2\x3\x2\x3\x3\a\x3K\n\x3\f\x3\xE\x3N\v\x3"+
		"\x3\x3\x5\x3Q\n\x3\x3\x4\x3\x4\x5\x4U\n\x4\x3\x4\x5\x4X\n\x4\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\a\x5u\n\x5\f\x5\xE\x5x\v\x5\x3\x5\x5\x5{\n\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x87\n\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x5\x5\xA1\n\x5\x5\x5\xA3\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3"+
		"\a\x3\a\x3\b\x3\b\a\b\xAF\n\b\f\b\xE\b\xB2\v\b\x3\b\x5\b\xB5\n\b\x3\t"+
		"\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\a\v\xC0\n\v\f\v\xE\v\xC3\v\v"+
		"\x3\f\x3\f\x3\f\a\f\xC8\n\f\f\f\xE\f\xCB\v\f\x3\r\x3\r\x3\r\a\r\xD0\n"+
		"\r\f\r\xE\r\xD3\v\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\xE2\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\xFC\n\xE\f\xE\xE"+
		"\xE\xFF\v\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3"+
		"\x13\x3\x13\a\x13\x10B\n\x13\f\x13\xE\x13\x10E\v\x13\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x5\x14\x115\n\x14\x3\x15\x3\x15\x5\x15\x119\n\x15\x3"+
		"\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x122\n\x17\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x12A\n\x18\x3\x19\x3\x19\x5"+
		"\x19\x12E\n\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x5\x1A\x134\n\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x5\x1A\x139\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x5\x1C"+
		"\x140\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x149"+
		"\n\x1D\x3\x1D\x5\x1D\x14C\n\x1D\x3\x1E\x3\x1E\x5\x1E\x150\n\x1E\x3\x1E"+
		"\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x158\n\x1F\f\x1F\xE\x1F\x15B"+
		"\v\x1F\x3\x1F\x5\x1F\x15E\n\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3"+
		" \x5 \x16A\n \x3!\x3!\x3\"\x3\"\x3#\x3#\x3#\x2\x2\x3\x1A$\x2\x2\x4\x2"+
		"\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2"+
		"\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36"+
		"\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x2\t\x3\x2%\'\x3\x2(*\x4\x2\'"+
		"\'++\x3\x2,\x31\x4\x2\x4\x4\xF\xF\x3\x2\x36\x39\x3\x2\x33\x35\x189\x2"+
		"\x46\x3\x2\x2\x2\x4L\x3\x2\x2\x2\x6R\x3\x2\x2\x2\b\xA2\x3\x2\x2\x2\n\xA4"+
		"\x3\x2\x2\x2\f\xA9\x3\x2\x2\x2\xE\xAC\x3\x2\x2\x2\x10\xB6\x3\x2\x2\x2"+
		"\x12\xB9\x3\x2\x2\x2\x14\xBC\x3\x2\x2\x2\x16\xC4\x3\x2\x2\x2\x18\xCC\x3"+
		"\x2\x2\x2\x1A\xE1\x3\x2\x2\x2\x1C\x100\x3\x2\x2\x2\x1E\x102\x3\x2\x2\x2"+
		" \x104\x3\x2\x2\x2\"\x106\x3\x2\x2\x2$\x108\x3\x2\x2\x2&\x114\x3\x2\x2"+
		"\x2(\x118\x3\x2\x2\x2*\x11A\x3\x2\x2\x2,\x121\x3\x2\x2\x2.\x129\x3\x2"+
		"\x2\x2\x30\x12D\x3\x2\x2\x2\x32\x138\x3\x2\x2\x2\x34\x13A\x3\x2\x2\x2"+
		"\x36\x13D\x3\x2\x2\x2\x38\x14B\x3\x2\x2\x2:\x14D\x3\x2\x2\x2<\x153\x3"+
		"\x2\x2\x2>\x169\x3\x2\x2\x2@\x16B\x3\x2\x2\x2\x42\x16D\x3\x2\x2\x2\x44"+
		"\x16F\x3\x2\x2\x2\x46G\x5\x4\x3\x2GH\a\x2\x2\x3H\x3\x3\x2\x2\x2IK\x5\b"+
		"\x5\x2JI\x3\x2\x2\x2KN\x3\x2\x2\x2LJ\x3\x2\x2\x2LM\x3\x2\x2\x2MP\x3\x2"+
		"\x2\x2NL\x3\x2\x2\x2OQ\x5\x6\x4\x2PO\x3\x2\x2\x2PQ\x3\x2\x2\x2Q\x5\x3"+
		"\x2\x2\x2RT\a\x3\x2\x2SU\x5\x18\r\x2TS\x3\x2\x2\x2TU\x3\x2\x2\x2UW\x3"+
		"\x2\x2\x2VX\a\x4\x2\x2WV\x3\x2\x2\x2WX\x3\x2\x2\x2X\a\x3\x2\x2\x2Y\xA3"+
		"\a\x4\x2\x2Z[\x5\x14\v\x2[\\\a\x5\x2\x2\\]\x5\x18\r\x2]\xA3\x3\x2\x2\x2"+
		"^\xA3\x5*\x16\x2_\xA3\a\x6\x2\x2`\x61\a\a\x2\x2\x61\x62\x5\x4\x3\x2\x62"+
		"\x63\a\b\x2\x2\x63\xA3\x3\x2\x2\x2\x64\x65\a\t\x2\x2\x65\x66\x5\x1A\xE"+
		"\x2\x66g\a\a\x2\x2gh\x5\x4\x3\x2hi\a\b\x2\x2i\xA3\x3\x2\x2\x2jk\a\n\x2"+
		"\x2kl\x5\x4\x3\x2lm\a\v\x2\x2mn\x5\x1A\xE\x2n\xA3\x3\x2\x2\x2op\a\f\x2"+
		"\x2pq\x5\x1A\xE\x2qr\a\r\x2\x2rv\x5\x4\x3\x2su\x5\n\x6\x2ts\x3\x2\x2\x2"+
		"ux\x3\x2\x2\x2vt\x3\x2\x2\x2vw\x3\x2\x2\x2wz\x3\x2\x2\x2xv\x3\x2\x2\x2"+
		"y{\x5\f\a\x2zy\x3\x2\x2\x2z{\x3\x2\x2\x2{|\x3\x2\x2\x2|}\a\b\x2\x2}\xA3"+
		"\x3\x2\x2\x2~\x7F\a\xE\x2\x2\x7F\x80\a\x32\x2\x2\x80\x81\a\x5\x2\x2\x81"+
		"\x82\x5\x1A\xE\x2\x82\x83\a\xF\x2\x2\x83\x86\x5\x1A\xE\x2\x84\x85\a\xF"+
		"\x2\x2\x85\x87\x5\x1A\xE\x2\x86\x84\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87"+
		"\x88\x3\x2\x2\x2\x88\x89\a\a\x2\x2\x89\x8A\x5\x4\x3\x2\x8A\x8B\a\b\x2"+
		"\x2\x8B\xA3\x3\x2\x2\x2\x8C\x8D\a\xE\x2\x2\x8D\x8E\x5\x16\f\x2\x8E\x8F"+
		"\a\x10\x2\x2\x8F\x90\x5\x1A\xE\x2\x90\x91\a\a\x2\x2\x91\x92\x5\x4\x3\x2"+
		"\x92\x93\a\b\x2\x2\x93\xA3\x3\x2\x2\x2\x94\x95\a\x11\x2\x2\x95\x96\x5"+
		"\xE\b\x2\x96\x97\x5\x36\x1C\x2\x97\xA3\x3\x2\x2\x2\x98\x99\a\x12\x2\x2"+
		"\x99\x9A\a\x11\x2\x2\x9A\x9B\a\x32\x2\x2\x9B\xA3\x5\x36\x1C\x2\x9C\x9D"+
		"\a\x12\x2\x2\x9D\xA0\x5\x16\f\x2\x9E\x9F\a\x5\x2\x2\x9F\xA1\x5\x18\r\x2"+
		"\xA0\x9E\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\xA3\x3\x2\x2\x2\xA2Y\x3\x2"+
		"\x2\x2\xA2Z\x3\x2\x2\x2\xA2^\x3\x2\x2\x2\xA2_\x3\x2\x2\x2\xA2`\x3\x2\x2"+
		"\x2\xA2\x64\x3\x2\x2\x2\xA2j\x3\x2\x2\x2\xA2o\x3\x2\x2\x2\xA2~\x3\x2\x2"+
		"\x2\xA2\x8C\x3\x2\x2\x2\xA2\x94\x3\x2\x2\x2\xA2\x98\x3\x2\x2\x2\xA2\x9C"+
		"\x3\x2\x2\x2\xA3\t\x3\x2\x2\x2\xA4\xA5\a\x13\x2\x2\xA5\xA6\x5\x1A\xE\x2"+
		"\xA6\xA7\a\r\x2\x2\xA7\xA8\x5\x4\x3\x2\xA8\v\x3\x2\x2\x2\xA9\xAA\a\x14"+
		"\x2\x2\xAA\xAB\x5\x4\x3\x2\xAB\r\x3\x2\x2\x2\xAC\xB0\a\x32\x2\x2\xAD\xAF"+
		"\x5\x10\t\x2\xAE\xAD\x3\x2\x2\x2\xAF\xB2\x3\x2\x2\x2\xB0\xAE\x3\x2\x2"+
		"\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB4\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB3\xB5"+
		"\x5\x12\n\x2\xB4\xB3\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xF\x3\x2\x2\x2"+
		"\xB6\xB7\a\x15\x2\x2\xB7\xB8\a\x32\x2\x2\xB8\x11\x3\x2\x2\x2\xB9\xBA\a"+
		"\x16\x2\x2\xBA\xBB\a\x32\x2\x2\xBB\x13\x3\x2\x2\x2\xBC\xC1\x5,\x17\x2"+
		"\xBD\xBE\a\xF\x2\x2\xBE\xC0\x5,\x17\x2\xBF\xBD\x3\x2\x2\x2\xC0\xC3\x3"+
		"\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\x15\x3\x2\x2\x2"+
		"\xC3\xC1\x3\x2\x2\x2\xC4\xC9\a\x32\x2\x2\xC5\xC6\a\xF\x2\x2\xC6\xC8\a"+
		"\x32\x2\x2\xC7\xC5\x3\x2\x2\x2\xC8\xCB\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2"+
		"\xC9\xCA\x3\x2\x2\x2\xCA\x17\x3\x2\x2\x2\xCB\xC9\x3\x2\x2\x2\xCC\xD1\x5"+
		"\x1A\xE\x2\xCD\xCE\a\xF\x2\x2\xCE\xD0\x5\x1A\xE\x2\xCF\xCD\x3\x2\x2\x2"+
		"\xD0\xD3\x3\x2\x2\x2\xD1\xCF\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\x19\x3"+
		"\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD4\xD5\b\xE\x1\x2\xD5\xE2\a\x17\x2\x2\xD6"+
		"\xE2\a\x18\x2\x2\xD7\xE2\a\x19\x2\x2\xD8\xE2\x5\x42\"\x2\xD9\xE2\x5\x44"+
		"#\x2\xDA\xE2\a\x1A\x2\x2\xDB\xE2\x5\x34\x1B\x2\xDC\xE2\x5$\x13\x2\xDD"+
		"\xE2\x5:\x1E\x2\xDE\xDF\x5\x1C\xF\x2\xDF\xE0\x5\x1A\xE\t\xE0\xE2\x3\x2"+
		"\x2\x2\xE1\xD4\x3\x2\x2\x2\xE1\xD6\x3\x2\x2\x2\xE1\xD7\x3\x2\x2\x2\xE1"+
		"\xD8\x3\x2\x2\x2\xE1\xD9\x3\x2\x2\x2\xE1\xDA\x3\x2\x2\x2\xE1\xDB\x3\x2"+
		"\x2\x2\xE1\xDC\x3\x2\x2\x2\xE1\xDD\x3\x2\x2\x2\xE1\xDE\x3\x2\x2\x2\xE2"+
		"\xFD\x3\x2\x2\x2\xE3\xE4\f\n\x2\x2\xE4\xE5\a\x1B\x2\x2\xE5\xFC\x5\x1A"+
		"\xE\n\xE6\xE7\f\b\x2\x2\xE7\xE8\x5\x1E\x10\x2\xE8\xE9\x5\x1A\xE\t\xE9"+
		"\xFC\x3\x2\x2\x2\xEA\xEB\f\a\x2\x2\xEB\xEC\x5 \x11\x2\xEC\xED\x5\x1A\xE"+
		"\b\xED\xFC\x3\x2\x2\x2\xEE\xEF\f\x6\x2\x2\xEF\xF0\a\x1C\x2\x2\xF0\xFC"+
		"\x5\x1A\xE\x6\xF1\xF2\f\x5\x2\x2\xF2\xF3\x5\"\x12\x2\xF3\xF4\x5\x1A\xE"+
		"\x6\xF4\xFC\x3\x2\x2\x2\xF5\xF6\f\x4\x2\x2\xF6\xF7\a\x1D\x2\x2\xF7\xFC"+
		"\x5\x1A\xE\x5\xF8\xF9\f\x3\x2\x2\xF9\xFA\a\x1E\x2\x2\xFA\xFC\x5\x1A\xE"+
		"\x4\xFB\xE3\x3\x2\x2\x2\xFB\xE6\x3\x2\x2\x2\xFB\xEA\x3\x2\x2\x2\xFB\xEE"+
		"\x3\x2\x2\x2\xFB\xF1\x3\x2\x2\x2\xFB\xF5\x3\x2\x2\x2\xFB\xF8\x3\x2\x2"+
		"\x2\xFC\xFF\x3\x2\x2\x2\xFD\xFB\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\x1B"+
		"\x3\x2\x2\x2\xFF\xFD\x3\x2\x2\x2\x100\x101\t\x2\x2\x2\x101\x1D\x3\x2\x2"+
		"\x2\x102\x103\t\x3\x2\x2\x103\x1F\x3\x2\x2\x2\x104\x105\t\x4\x2\x2\x105"+
		"!\x3\x2\x2\x2\x106\x107\t\x5\x2\x2\x107#\x3\x2\x2\x2\x108\x10C\x5&\x14"+
		"\x2\x109\x10B\x5(\x15\x2\x10A\x109\x3\x2\x2\x2\x10B\x10E\x3\x2\x2\x2\x10C"+
		"\x10A\x3\x2\x2\x2\x10C\x10D\x3\x2\x2\x2\x10D%\x3\x2\x2\x2\x10E\x10C\x3"+
		"\x2\x2\x2\x10F\x115\a\x32\x2\x2\x110\x111\a\x1F\x2\x2\x111\x112\x5\x1A"+
		"\xE\x2\x112\x113\a \x2\x2\x113\x115\x3\x2\x2\x2\x114\x10F\x3\x2\x2\x2"+
		"\x114\x110\x3\x2\x2\x2\x115\'\x3\x2\x2\x2\x116\x119\x5.\x18\x2\x117\x119"+
		"\x5\x30\x19\x2\x118\x116\x3\x2\x2\x2\x118\x117\x3\x2\x2\x2\x119)\x3\x2"+
		"\x2\x2\x11A\x11B\x5$\x13\x2\x11B\x11C\x5\x30\x19\x2\x11C+\x3\x2\x2\x2"+
		"\x11D\x122\a\x32\x2\x2\x11E\x11F\x5$\x13\x2\x11F\x120\x5.\x18\x2\x120"+
		"\x122\x3\x2\x2\x2\x121\x11D\x3\x2\x2\x2\x121\x11E\x3\x2\x2\x2\x122-\x3"+
		"\x2\x2\x2\x123\x124\a!\x2\x2\x124\x125\x5\x1A\xE\x2\x125\x126\a\"\x2\x2"+
		"\x126\x12A\x3\x2\x2\x2\x127\x128\a\x15\x2\x2\x128\x12A\a\x32\x2\x2\x129"+
		"\x123\x3\x2\x2\x2\x129\x127\x3\x2\x2\x2\x12A/\x3\x2\x2\x2\x12B\x12C\a"+
		"\x16\x2\x2\x12C\x12E\a\x32\x2\x2\x12D\x12B\x3\x2\x2\x2\x12D\x12E\x3\x2"+
		"\x2\x2\x12E\x12F\x3\x2\x2\x2\x12F\x130\x5\x32\x1A\x2\x130\x31\x3\x2\x2"+
		"\x2\x131\x133\a\x1F\x2\x2\x132\x134\x5\x18\r\x2\x133\x132\x3\x2\x2\x2"+
		"\x133\x134\x3\x2\x2\x2\x134\x135\x3\x2\x2\x2\x135\x139\a \x2\x2\x136\x139"+
		"\x5:\x1E\x2\x137\x139\x5\x44#\x2\x138\x131\x3\x2\x2\x2\x138\x136\x3\x2"+
		"\x2\x2\x138\x137\x3\x2\x2\x2\x139\x33\x3\x2\x2\x2\x13A\x13B\a\x11\x2\x2"+
		"\x13B\x13C\x5\x36\x1C\x2\x13C\x35\x3\x2\x2\x2\x13D\x13F\a\x1F\x2\x2\x13E"+
		"\x140\x5\x38\x1D\x2\x13F\x13E\x3\x2\x2\x2\x13F\x140\x3\x2\x2\x2\x140\x141"+
		"\x3\x2\x2\x2\x141\x142\a \x2\x2\x142\x143\x5\x4\x3\x2\x143\x144\a\b\x2"+
		"\x2\x144\x37\x3\x2\x2\x2\x145\x148\x5\x16\f\x2\x146\x147\a\xF\x2\x2\x147"+
		"\x149\a\x1A\x2\x2\x148\x146\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149\x14C"+
		"\x3\x2\x2\x2\x14A\x14C\a\x1A\x2\x2\x14B\x145\x3\x2\x2\x2\x14B\x14A\x3"+
		"\x2\x2\x2\x14C\x39\x3\x2\x2\x2\x14D\x14F\a#\x2\x2\x14E\x150\x5<\x1F\x2"+
		"\x14F\x14E\x3\x2\x2\x2\x14F\x150\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2\x151"+
		"\x152\a$\x2\x2\x152;\x3\x2\x2\x2\x153\x159\x5> \x2\x154\x155\x5@!\x2\x155"+
		"\x156\x5> \x2\x156\x158\x3\x2\x2\x2\x157\x154\x3\x2\x2\x2\x158\x15B\x3"+
		"\x2\x2\x2\x159\x157\x3\x2\x2\x2\x159\x15A\x3\x2\x2\x2\x15A\x15D\x3\x2"+
		"\x2\x2\x15B\x159\x3\x2\x2\x2\x15C\x15E\x5@!\x2\x15D\x15C\x3\x2\x2\x2\x15D"+
		"\x15E\x3\x2\x2\x2\x15E=\x3\x2\x2\x2\x15F\x160\a!\x2\x2\x160\x161\x5\x1A"+
		"\xE\x2\x161\x162\a\"\x2\x2\x162\x163\a\x5\x2\x2\x163\x164\x5\x1A\xE\x2"+
		"\x164\x16A\x3\x2\x2\x2\x165\x166\a\x32\x2\x2\x166\x167\a\x5\x2\x2\x167"+
		"\x16A\x5\x1A\xE\x2\x168\x16A\x5\x1A\xE\x2\x169\x15F\x3\x2\x2\x2\x169\x165"+
		"\x3\x2\x2\x2\x169\x168\x3\x2\x2\x2\x16A?\x3\x2\x2\x2\x16B\x16C\t\x6\x2"+
		"\x2\x16C\x41\x3\x2\x2\x2\x16D\x16E\t\a\x2\x2\x16E\x43\x3\x2\x2\x2\x16F"+
		"\x170\t\b\x2\x2\x170\x45\x3\x2\x2\x2\"LPTWvz\x86\xA0\xA2\xB0\xB4\xC1\xC9"+
		"\xD1\xE1\xFB\xFD\x10C\x114\x118\x121\x129\x12D\x133\x138\x13F\x148\x14B"+
		"\x14F\x159\x15D\x169";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace zlua.Compiler
