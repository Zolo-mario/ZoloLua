class Instr:

    def __init__(self, operator):
        self.operator = ''
        self.operand_types = []
class ISA():

    def __init__(self):
        self.grammar = {
            'var': [r'[_a-zA-Z]\w*'],
            'literal': [r'([+-]?\d+)', r'([+-]?\d*\.\d+)', r'(\".*\")'],
            'func': [r'[_a-zA-Z]\w*'],
            'label': [r'[_a-zA-Z]\w*']}
        self.instrs = {}
        self.build()

        # ---- self.grammar is generated by following code
        #     self.grammar = self.parse_grammar(r'''
        #                 var => [_a-zA-Z]\w+
        #                 literal => ([+-]?\d+)|([+-]?\d*\.\d+)|(\".*\")
        #                 func => [_a-zA-Z]\w+
        #                 label => [_a-zA-Z]\w+
        #                 ''')
        #     pass
        # def parse_grammar(self,description):
        #     def _split(text,sep=None):
        #         return [t.strip() for t in text.strip().split(sep) if t]
        #     g={}
        #     description=description.replace('\t','') #remove tabs
        #     for line in _split(description,'\n'):
        #         lhs,rhs=_split(line,' => ')
        #         g[lhs]=_split(rhs,'|')
        #     return g
    def build(self):
        self.instrs['Mov'] = Instr('Mov')
        self.instrs['Mov'].operand_types.append(['var'])
        self.instrs['Mov'].operand_types.append(['var', 'literal'])
        self.instrs['Var'] = Instr('Var')
        self.instrs['Var'].operand_types.append(['var'])
