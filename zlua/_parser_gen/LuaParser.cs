//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5-beta001
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\91018\Desktop\zlua\zlua\Lua.g4 by ANTLR 4.6.5-beta001

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace zlua.AntlrGen {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5-beta001")]
[System.CLSCompliant(false)]
public partial class LuaParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, NAME=54, NORMALSTRING=55, CHARSTRING=56, LONGSTRING=57, INT=58, 
		HEX=59, FLOAT=60, HEX_FLOAT=61, COMMENT=62, LINE_COMMENT=63, WS=64, SHEBANG=65;
	public const int
		RULE_chunk = 0, RULE_block = 1, RULE_stat = 2, RULE_retstat = 3, RULE_funcname = 4, 
		RULE_varlist = 5, RULE_namelist = 6, RULE_explist = 7, RULE_exp = 8, RULE_nilfalsetruevararg = 9, 
		RULE_prefixexp = 10, RULE_functioncall = 11, RULE_varOrExp = 12, RULE_var = 13, 
		RULE_varSuffix = 14, RULE_nameAndArgs = 15, RULE_args = 16, RULE_functiondef = 17, 
		RULE_funcbody = 18, RULE_parlist = 19, RULE_tableconstructor = 20, RULE_fieldlist = 21, 
		RULE_field = 22, RULE_fieldsep = 23, RULE_operatorOr = 24, RULE_operatorAnd = 25, 
		RULE_operatorComparison = 26, RULE_operatorStrcat = 27, RULE_operatorAddSub = 28, 
		RULE_operatorMulDivMod = 29, RULE_operatorBitwise = 30, RULE_operatorUnary = 31, 
		RULE_operatorPower = 32, RULE_number = 33, RULE_string = 34;
	public static readonly string[] ruleNames = {
		"chunk", "block", "stat", "retstat", "funcname", "varlist", "namelist", 
		"explist", "exp", "nilfalsetruevararg", "prefixexp", "functioncall", "varOrExp", 
		"var", "varSuffix", "nameAndArgs", "args", "functiondef", "funcbody", 
		"parlist", "tableconstructor", "fieldlist", "field", "fieldsep", "operatorOr", 
		"operatorAnd", "operatorComparison", "operatorStrcat", "operatorAddSub", 
		"operatorMulDivMod", "operatorBitwise", "operatorUnary", "operatorPower", 
		"number", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'break'", "'do'", "'end'", "'while'", "'repeat'", 
		"'until'", "'if'", "'then'", "'elseif'", "'else'", "'for'", "','", "'in'", 
		"'function'", "'local'", "'return'", "'.'", "':'", "'nil'", "'false'", 
		"'true'", "'...'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'or'", "'and'", 
		"'<'", "'>'", "'<='", "'>='", "'~='", "'=='", "'..'", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'//'", "'&'", "'|'", "'~'", "'<<'", "'>>'", "'not'", "'#'", 
		"'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "NAME", "NORMALSTRING", "CHARSTRING", 
		"LONGSTRING", "INT", "HEX", "FLOAT", "HEX_FLOAT", "COMMENT", "LINE_COMMENT", 
		"WS", "SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lua.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LuaParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ChunkContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(LuaParser.Eof, 0); }
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterChunk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitChunk(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_chunk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; block();
			State = 71; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public RetstatContext retstat() {
			return GetRuleContext<RetstatContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__5) | (1L << T__6) | (1L << T__8) | (1L << T__12) | (1L << T__15) | (1L << T__16) | (1L << T__24) | (1L << NAME))) != 0)) {
				{
				{
				State = 73; stat();
				}
				}
				State = 78;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 80;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__17) {
				{
				State = 79; retstat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	 
		public StatContext() { }
		public virtual void CopyFrom(StatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EmptyStatContext : StatContext {
		public EmptyStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterEmptyStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitEmptyStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStatContext : StatContext {
		public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public AssignStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterAssignStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitAssignStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctioncallStatContext : StatContext {
		public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public FunctioncallStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFunctioncallStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFunctioncallStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncallStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatContext : StatContext {
		public BreakStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterBreakStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitBreakStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoendStatContext : StatContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DoendStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterDoendStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitDoendStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoendStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatContext : StatContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterWhileStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitWhileStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RepeatStatContext : StatContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public RepeatStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterRepeatStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitRepeatStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfelseStatContext : StatContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfelseStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterIfelseStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitIfelseStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfelseStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForijkStatContext : StatContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForijkStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterForijkStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitForijkStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForijkStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForinStatContext : StatContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForinStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterForinStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitForinStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForinStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctiondefStatContext : StatContext {
		public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctiondefStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFunctiondefStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFunctiondefStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondefStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LocalfunctiondefStatContext : StatContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public LocalfunctiondefStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterLocalfunctiondefStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitLocalfunctiondefStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalfunctiondefStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LocalassignStatContext : StatContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public LocalassignStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterLocalassignStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitLocalassignStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalassignStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_stat);
		int _la;
		try {
			State = 160;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				_localctx = new EmptyStatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 82; Match(T__0);
				}
				break;

			case 2:
				_localctx = new AssignStatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 83; varlist();
				State = 84; Match(T__1);
				State = 85; explist();
				}
				break;

			case 3:
				_localctx = new FunctioncallStatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 87; functioncall();
				}
				break;

			case 4:
				_localctx = new BreakStatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 88; Match(T__2);
				}
				break;

			case 5:
				_localctx = new DoendStatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 89; Match(T__3);
				State = 90; block();
				State = 91; Match(T__4);
				}
				break;

			case 6:
				_localctx = new WhileStatContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 93; Match(T__5);
				State = 94; exp(0);
				State = 95; Match(T__3);
				State = 96; block();
				State = 97; Match(T__4);
				}
				break;

			case 7:
				_localctx = new RepeatStatContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 99; Match(T__6);
				State = 100; block();
				State = 101; Match(T__7);
				State = 102; exp(0);
				}
				break;

			case 8:
				_localctx = new IfelseStatContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 104; Match(T__8);
				State = 105; exp(0);
				State = 106; Match(T__9);
				State = 107; block();
				State = 115;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__10) {
					{
					{
					State = 108; Match(T__10);
					State = 109; exp(0);
					State = 110; Match(T__9);
					State = 111; block();
					}
					}
					State = 117;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 120;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__11) {
					{
					State = 118; Match(T__11);
					State = 119; block();
					}
				}

				State = 122; Match(T__4);
				}
				break;

			case 9:
				_localctx = new ForijkStatContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 124; Match(T__12);
				State = 125; Match(NAME);
				State = 126; Match(T__1);
				State = 127; exp(0);
				State = 128; Match(T__13);
				State = 129; exp(0);
				State = 132;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__13) {
					{
					State = 130; Match(T__13);
					State = 131; exp(0);
					}
				}

				State = 134; Match(T__3);
				State = 135; block();
				State = 136; Match(T__4);
				}
				break;

			case 10:
				_localctx = new ForinStatContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 138; Match(T__12);
				State = 139; namelist();
				State = 140; Match(T__14);
				State = 141; explist();
				State = 142; Match(T__3);
				State = 143; block();
				State = 144; Match(T__4);
				}
				break;

			case 11:
				_localctx = new FunctiondefStatContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 146; Match(T__15);
				State = 147; funcname();
				State = 148; funcbody();
				}
				break;

			case 12:
				_localctx = new LocalfunctiondefStatContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 150; Match(T__16);
				State = 151; Match(T__15);
				State = 152; Match(NAME);
				State = 153; funcbody();
				}
				break;

			case 13:
				_localctx = new LocalassignStatContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 154; Match(T__16);
				State = 155; namelist();
				State = 158;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__1) {
					{
					State = 156; Match(T__1);
					State = 157; explist();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetstatContext : ParserRuleContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public RetstatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retstat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterRetstat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitRetstat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetstat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetstatContext retstat() {
		RetstatContext _localctx = new RetstatContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_retstat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(T__17);
			State = 164;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__28) | (1L << T__40) | (1L << T__47) | (1L << T__50) | (1L << T__51) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
				{
				State = 163; explist();
				}
			}

			State = 167;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__0) {
				{
				State = 166; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(LuaParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(LuaParser.NAME, i);
		}
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFuncname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFuncname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_funcname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(NAME);
			State = 174;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__18) {
				{
				{
				State = 170; Match(T__18);
				State = 171; Match(NAME);
				}
				}
				State = 176;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 179;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__19) {
				{
				State = 177; Match(T__19);
				State = 178; Match(NAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVarlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVarlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_varlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; var();
			State = 186;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__13) {
				{
				{
				State = 182; Match(T__13);
				State = 183; var();
				}
				}
				State = 188;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(LuaParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(LuaParser.NAME, i);
		}
		public NamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNamelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNamelist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamelistContext namelist() {
		NamelistContext _localctx = new NamelistContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_namelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; Match(NAME);
			State = 194;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 190; Match(T__13);
					State = 191; Match(NAME);
					}
					} 
				}
				State = 196;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterExplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitExplist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_explist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; exp(0);
			State = 202;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__13) {
				{
				{
				State = 198; Match(T__13);
				State = 199; exp(0);
				}
				}
				State = 204;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NilfalsetruevarargExpContext : ExpContext {
		public NilfalsetruevarargContext nilfalsetruevararg() {
			return GetRuleContext<NilfalsetruevarargContext>(0);
		}
		public NilfalsetruevarargExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNilfalsetruevarargExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNilfalsetruevarargExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNilfalsetruevarargExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExpContext : ExpContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NumberExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNumberExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNumberExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringExpContext : ExpContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public StringExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStringExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStringExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctiondefExpContext : ExpContext {
		public FunctiondefContext functiondef() {
			return GetRuleContext<FunctiondefContext>(0);
		}
		public FunctiondefExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFunctiondefExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFunctiondefExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondefExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixexpExpContext : ExpContext {
		public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		public PrefixexpExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterPrefixexpExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitPrefixexpExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixexpExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TablectorExpContext : ExpContext {
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public TablectorExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterTablectorExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitTablectorExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablectorExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowExpContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorPowerContext operatorPower() {
			return GetRuleContext<OperatorPowerContext>(0);
		}
		public PowExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterPowExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitPowExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnmExpContext : ExpContext {
		public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public UnmExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterUnmExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitUnmExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnmExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MuldivExpContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		public MuldivExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterMuldivExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitMuldivExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMuldivExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddsubExpContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		public AddsubExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterAddsubExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitAddsubExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddsubExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatExpContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorStrcatContext operatorStrcat() {
			return GetRuleContext<OperatorStrcatContext>(0);
		}
		public ConcatExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterConcatExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitConcatExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CmpExpContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		public CmpExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterCmpExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitCmpExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmpExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorAndContext operatorAnd() {
			return GetRuleContext<OperatorAndContext>(0);
		}
		public AndExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterAndExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitAndExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorOrContext operatorOr() {
			return GetRuleContext<OperatorOrContext>(0);
		}
		public OrExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOrExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOrExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseExpContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorBitwiseContext operatorBitwise() {
			return GetRuleContext<OperatorBitwiseContext>(0);
		}
		public BitwiseExpContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterBitwiseExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitBitwiseExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(_ctx, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__20:
			case T__21:
			case T__22:
			case T__23:
				{
				_localctx = new NilfalsetruevarargExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 206; nilfalsetruevararg();
				}
				break;
			case INT:
			case HEX:
			case FLOAT:
			case HEX_FLOAT:
				{
				_localctx = new NumberExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 207; number();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				{
				_localctx = new StringExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 208; @string();
				}
				break;
			case T__15:
				{
				_localctx = new FunctiondefExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 209; functiondef();
				}
				break;
			case T__24:
			case NAME:
				{
				_localctx = new PrefixexpExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 210; prefixexp();
				}
				break;
			case T__28:
				{
				_localctx = new TablectorExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 211; tableconstructor();
				}
				break;
			case T__40:
			case T__47:
			case T__50:
			case T__51:
				{
				_localctx = new UnmExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 212; operatorUnary();
				State = 213; exp(8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 251;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 249;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
					case 1:
						{
						_localctx = new PowExpContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 217;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 218; operatorPower();
						State = 219; exp(9);
						}
						break;

					case 2:
						{
						_localctx = new MuldivExpContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 221;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 222; operatorMulDivMod();
						State = 223; exp(8);
						}
						break;

					case 3:
						{
						_localctx = new AddsubExpContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 225;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 226; operatorAddSub();
						State = 227; exp(7);
						}
						break;

					case 4:
						{
						_localctx = new ConcatExpContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 229;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 230; operatorStrcat();
						State = 231; exp(5);
						}
						break;

					case 5:
						{
						_localctx = new CmpExpContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 233;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 234; operatorComparison();
						State = 235; exp(5);
						}
						break;

					case 6:
						{
						_localctx = new AndExpContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 237;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 238; operatorAnd();
						State = 239; exp(4);
						}
						break;

					case 7:
						{
						_localctx = new OrExpContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 241;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 242; operatorOr();
						State = 243; exp(3);
						}
						break;

					case 8:
						{
						_localctx = new BitwiseExpContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 245;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 246; operatorBitwise();
						State = 247; exp(2);
						}
						break;
					}
					} 
				}
				State = 253;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NilfalsetruevarargContext : ParserRuleContext {
		public NilfalsetruevarargContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nilfalsetruevararg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNilfalsetruevararg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNilfalsetruevararg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNilfalsetruevararg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NilfalsetruevarargContext nilfalsetruevararg() {
		NilfalsetruevarargContext _localctx = new NilfalsetruevarargContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_nilfalsetruevararg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixexpContext : ParserRuleContext {
		public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public PrefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterPrefixexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitPrefixexp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixexpContext prefixexp() {
		PrefixexpContext _localctx = new PrefixexpContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_prefixexp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; varOrExp();
			State = 260;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 257; nameAndArgs();
					}
					} 
				}
				State = 262;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFunctioncall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFunctioncall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_functioncall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; varOrExp();
			State = 265;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 264; nameAndArgs();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 267;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrExpContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarOrExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVarOrExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVarOrExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrExpContext varOrExp() {
		VarOrExpContext _localctx = new VarOrExpContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_varOrExp);
		try {
			State = 274;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 269; var();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 270; Match(T__24);
				State = 271; exp(0);
				State = 272; Match(T__25);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarSuffixContext[] varSuffix() {
			return GetRuleContexts<VarSuffixContext>();
		}
		public VarSuffixContext varSuffix(int i) {
			return GetRuleContext<VarSuffixContext>(i);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_var);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NAME:
				{
				State = 276; Match(NAME);
				}
				break;
			case T__24:
				{
				State = 277; Match(T__24);
				State = 278; exp(0);
				State = 279; Match(T__25);
				State = 280; varSuffix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 287;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 284; varSuffix();
					}
					} 
				}
				State = 289;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSuffixContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public VarSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVarSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVarSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarSuffixContext varSuffix() {
		VarSuffixContext _localctx = new VarSuffixContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_varSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__19) | (1L << T__24) | (1L << T__28) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) {
				{
				{
				State = 290; nameAndArgs();
				}
				}
				State = 295;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 302;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__26:
				{
				State = 296; Match(T__26);
				State = 297; exp(0);
				State = 298; Match(T__27);
				}
				break;
			case T__18:
				{
				State = 300; Match(T__18);
				State = 301; Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameAndArgsContext : ParserRuleContext {
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public NameAndArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameAndArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNameAndArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNameAndArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameAndArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameAndArgsContext nameAndArgs() {
		NameAndArgsContext _localctx = new NameAndArgsContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_nameAndArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__19) {
				{
				State = 304; Match(T__19);
				State = 305; Match(NAME);
				}
			}

			State = 308; args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
	 
		public ArgsContext() { }
		public virtual void CopyFrom(ArgsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NormalArgsContext : ArgsContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public NormalArgsContext(ArgsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNormalArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNormalArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalArgs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TablectorArgsContext : ArgsContext {
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public TablectorArgsContext(ArgsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterTablectorArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitTablectorArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablectorArgs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringArgsContext : ArgsContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public StringArgsContext(ArgsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStringArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStringArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_args);
		int _la;
		try {
			State = 317;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__24:
				_localctx = new NormalArgsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 310; Match(T__24);
				State = 312;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__28) | (1L << T__40) | (1L << T__47) | (1L << T__50) | (1L << T__51) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
					{
					State = 311; explist();
					}
				}

				State = 314; Match(T__25);
				}
				break;
			case T__28:
				_localctx = new TablectorArgsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 315; tableconstructor();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				_localctx = new StringArgsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 316; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefContext : ParserRuleContext {
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFunctiondef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFunctiondef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefContext functiondef() {
		FunctiondefContext _localctx = new FunctiondefContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; Match(T__15);
			State = 320; funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncbodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		public FuncbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcbody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFuncbody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFuncbody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncbodyContext funcbody() {
		FuncbodyContext _localctx = new FuncbodyContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_funcbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; Match(T__24);
			State = 324;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__23 || _la==NAME) {
				{
				State = 323; parlist();
				}
			}

			State = 326; Match(T__25);
			State = 327; block();
			State = 328; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParlistContext : ParserRuleContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ParlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterParlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitParlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParlistContext parlist() {
		ParlistContext _localctx = new ParlistContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_parlist);
		int _la;
		try {
			State = 336;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 330; namelist();
				State = 333;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__13) {
					{
					State = 331; Match(T__13);
					State = 332; Match(T__23);
					}
				}

				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 2);
				{
				State = 335; Match(T__23);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstructorContext : ParserRuleContext {
		public FieldlistContext fieldlist() {
			return GetRuleContext<FieldlistContext>(0);
		}
		public TableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterTableconstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitTableconstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableconstructorContext tableconstructor() {
		TableconstructorContext _localctx = new TableconstructorContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_tableconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338; Match(T__28);
			State = 340;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__26) | (1L << T__28) | (1L << T__40) | (1L << T__47) | (1L << T__50) | (1L << T__51) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
				{
				State = 339; fieldlist();
				}
			}

			State = 342; Match(T__29);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsepContext[] fieldsep() {
			return GetRuleContexts<FieldsepContext>();
		}
		public FieldsepContext fieldsep(int i) {
			return GetRuleContext<FieldsepContext>(i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFieldlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFieldlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_fieldlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; field();
			State = 350;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 345; fieldsep();
					State = 346; field();
					}
					} 
				}
				State = 352;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			State = 354;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__0 || _la==T__13) {
				{
				State = 353; fieldsep();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_field);
		try {
			State = 366;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 356; Match(T__26);
				State = 357; exp(0);
				State = 358; Match(T__27);
				State = 359; Match(T__1);
				State = 360; exp(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 362; Match(NAME);
				State = 363; Match(T__1);
				State = 364; exp(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 365; exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsepContext : ParserRuleContext {
		public FieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsep; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFieldsep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFieldsep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsepContext fieldsep() {
		FieldsepContext _localctx = new FieldsepContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_fieldsep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			_la = _input.La(1);
			if ( !(_la==T__0 || _la==T__13) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOrContext : ParserRuleContext {
		public OperatorOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOrContext operatorOr() {
		OperatorOrContext _localctx = new OperatorOrContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_operatorOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; Match(T__30);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndContext : ParserRuleContext {
		public OperatorAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndContext operatorAnd() {
		OperatorAndContext _localctx = new OperatorAndContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_operatorAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372; Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorStrcatContext : ParserRuleContext {
		public OperatorStrcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorStrcat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorStrcat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorStrcat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorStrcat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorStrcatContext operatorStrcat() {
		OperatorStrcatContext _localctx = new OperatorStrcatContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_operatorStrcat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376; Match(T__38);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			_la = _input.La(1);
			if ( !(_la==T__39 || _la==T__40) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorBitwiseContext : ParserRuleContext {
		public OperatorBitwiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorBitwise; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorBitwise(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorBitwise(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorBitwiseContext operatorBitwise() {
		OperatorBitwiseContext _localctx = new OperatorBitwiseContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_operatorBitwise);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__40) | (1L << T__47) | (1L << T__50) | (1L << T__51))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorPowerContext : ParserRuleContext {
		public OperatorPowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorPower; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorPower(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorPower(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorPowerContext operatorPower() {
		OperatorPowerContext _localctx = new OperatorPowerContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_operatorPower);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; Match(T__52);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(LuaParser.INT, 0); }
		public ITerminalNode HEX() { return GetToken(LuaParser.HEX, 0); }
		public ITerminalNode FLOAT() { return GetToken(LuaParser.FLOAT, 0); }
		public ITerminalNode HEX_FLOAT() { return GetToken(LuaParser.HEX_FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode NORMALSTRING() { return GetToken(LuaParser.NORMALSTRING, 0); }
		public ITerminalNode CHARSTRING() { return GetToken(LuaParser.CHARSTRING, 0); }
		public ITerminalNode LONGSTRING() { return GetToken(LuaParser.LONGSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 9);

		case 1: return Precpred(_ctx, 7);

		case 2: return Precpred(_ctx, 6);

		case 3: return Precpred(_ctx, 5);

		case 4: return Precpred(_ctx, 4);

		case 5: return Precpred(_ctx, 3);

		case 6: return Precpred(_ctx, 2);

		case 7: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x43\x18B\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x3\x2\x3\x2\x3\x2\x3\x3\a\x3M\n\x3\f\x3\xE"+
		"\x3P\v\x3\x3\x3\x5\x3S\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\a\x4t\n\x4\f\x4\xE\x4w\v\x4\x3\x4\x3\x4\x5\x4{\n\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x87\n\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x5\x4\xA1\n\x4\x5\x4\xA3\n\x4\x3\x5\x3\x5\x5\x5\xA7\n\x5\x3\x5\x5\x5"+
		"\xAA\n\x5\x3\x6\x3\x6\x3\x6\a\x6\xAF\n\x6\f\x6\xE\x6\xB2\v\x6\x3\x6\x3"+
		"\x6\x5\x6\xB6\n\x6\x3\a\x3\a\x3\a\a\a\xBB\n\a\f\a\xE\a\xBE\v\a\x3\b\x3"+
		"\b\x3\b\a\b\xC3\n\b\f\b\xE\b\xC6\v\b\x3\t\x3\t\x3\t\a\t\xCB\n\t\f\t\xE"+
		"\t\xCE\v\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\xDA"+
		"\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\a\n\xFC\n\n\f\n\xE\n\xFF\v\n\x3\v\x3\v\x3\f"+
		"\x3\f\a\f\x105\n\f\f\f\xE\f\x108\v\f\x3\r\x3\r\x6\r\x10C\n\r\r\r\xE\r"+
		"\x10D\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x115\n\xE\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x5\xF\x11D\n\xF\x3\xF\a\xF\x120\n\xF\f\xF\xE\xF\x123"+
		"\v\xF\x3\x10\a\x10\x126\n\x10\f\x10\xE\x10\x129\v\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x5\x10\x131\n\x10\x3\x11\x3\x11\x5\x11\x135"+
		"\n\x11\x3\x11\x3\x11\x3\x12\x3\x12\x5\x12\x13B\n\x12\x3\x12\x3\x12\x3"+
		"\x12\x5\x12\x140\n\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x5\x14\x147"+
		"\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x5\x15\x150\n"+
		"\x15\x3\x15\x5\x15\x153\n\x15\x3\x16\x3\x16\x5\x16\x157\n\x16\x3\x16\x3"+
		"\x16\x3\x17\x3\x17\x3\x17\x3\x17\a\x17\x15F\n\x17\f\x17\xE\x17\x162\v"+
		"\x17\x3\x17\x5\x17\x165\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x171\n\x18\x3\x19\x3\x19\x3\x1A\x3"+
		"\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3"+
		"\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3$\x2\x2\x3\x12%\x2\x2"+
		"\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2"+
		"\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2\x2\v\x3\x2\x17\x1A"+
		"\x4\x2\x3\x3\x10\x10\x3\x2#(\x3\x2*+\x3\x2,/\x3\x2\x30\x34\x5\x2++\x32"+
		"\x32\x35\x36\x3\x2<?\x3\x2\x39;\x1A1\x2H\x3\x2\x2\x2\x4N\x3\x2\x2\x2\x6"+
		"\xA2\x3\x2\x2\x2\b\xA4\x3\x2\x2\x2\n\xAB\x3\x2\x2\x2\f\xB7\x3\x2\x2\x2"+
		"\xE\xBF\x3\x2\x2\x2\x10\xC7\x3\x2\x2\x2\x12\xD9\x3\x2\x2\x2\x14\x100\x3"+
		"\x2\x2\x2\x16\x102\x3\x2\x2\x2\x18\x109\x3\x2\x2\x2\x1A\x114\x3\x2\x2"+
		"\x2\x1C\x11C\x3\x2\x2\x2\x1E\x127\x3\x2\x2\x2 \x134\x3\x2\x2\x2\"\x13F"+
		"\x3\x2\x2\x2$\x141\x3\x2\x2\x2&\x144\x3\x2\x2\x2(\x152\x3\x2\x2\x2*\x154"+
		"\x3\x2\x2\x2,\x15A\x3\x2\x2\x2.\x170\x3\x2\x2\x2\x30\x172\x3\x2\x2\x2"+
		"\x32\x174\x3\x2\x2\x2\x34\x176\x3\x2\x2\x2\x36\x178\x3\x2\x2\x2\x38\x17A"+
		"\x3\x2\x2\x2:\x17C\x3\x2\x2\x2<\x17E\x3\x2\x2\x2>\x180\x3\x2\x2\x2@\x182"+
		"\x3\x2\x2\x2\x42\x184\x3\x2\x2\x2\x44\x186\x3\x2\x2\x2\x46\x188\x3\x2"+
		"\x2\x2HI\x5\x4\x3\x2IJ\a\x2\x2\x3J\x3\x3\x2\x2\x2KM\x5\x6\x4\x2LK\x3\x2"+
		"\x2\x2MP\x3\x2\x2\x2NL\x3\x2\x2\x2NO\x3\x2\x2\x2OR\x3\x2\x2\x2PN\x3\x2"+
		"\x2\x2QS\x5\b\x5\x2RQ\x3\x2\x2\x2RS\x3\x2\x2\x2S\x5\x3\x2\x2\x2T\xA3\a"+
		"\x3\x2\x2UV\x5\f\a\x2VW\a\x4\x2\x2WX\x5\x10\t\x2X\xA3\x3\x2\x2\x2Y\xA3"+
		"\x5\x18\r\x2Z\xA3\a\x5\x2\x2[\\\a\x6\x2\x2\\]\x5\x4\x3\x2]^\a\a\x2\x2"+
		"^\xA3\x3\x2\x2\x2_`\a\b\x2\x2`\x61\x5\x12\n\x2\x61\x62\a\x6\x2\x2\x62"+
		"\x63\x5\x4\x3\x2\x63\x64\a\a\x2\x2\x64\xA3\x3\x2\x2\x2\x65\x66\a\t\x2"+
		"\x2\x66g\x5\x4\x3\x2gh\a\n\x2\x2hi\x5\x12\n\x2i\xA3\x3\x2\x2\x2jk\a\v"+
		"\x2\x2kl\x5\x12\n\x2lm\a\f\x2\x2mu\x5\x4\x3\x2no\a\r\x2\x2op\x5\x12\n"+
		"\x2pq\a\f\x2\x2qr\x5\x4\x3\x2rt\x3\x2\x2\x2sn\x3\x2\x2\x2tw\x3\x2\x2\x2"+
		"us\x3\x2\x2\x2uv\x3\x2\x2\x2vz\x3\x2\x2\x2wu\x3\x2\x2\x2xy\a\xE\x2\x2"+
		"y{\x5\x4\x3\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{|\x3\x2\x2\x2|}\a\a\x2\x2}"+
		"\xA3\x3\x2\x2\x2~\x7F\a\xF\x2\x2\x7F\x80\a\x38\x2\x2\x80\x81\a\x4\x2\x2"+
		"\x81\x82\x5\x12\n\x2\x82\x83\a\x10\x2\x2\x83\x86\x5\x12\n\x2\x84\x85\a"+
		"\x10\x2\x2\x85\x87\x5\x12\n\x2\x86\x84\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2"+
		"\x87\x88\x3\x2\x2\x2\x88\x89\a\x6\x2\x2\x89\x8A\x5\x4\x3\x2\x8A\x8B\a"+
		"\a\x2\x2\x8B\xA3\x3\x2\x2\x2\x8C\x8D\a\xF\x2\x2\x8D\x8E\x5\xE\b\x2\x8E"+
		"\x8F\a\x11\x2\x2\x8F\x90\x5\x10\t\x2\x90\x91\a\x6\x2\x2\x91\x92\x5\x4"+
		"\x3\x2\x92\x93\a\a\x2\x2\x93\xA3\x3\x2\x2\x2\x94\x95\a\x12\x2\x2\x95\x96"+
		"\x5\n\x6\x2\x96\x97\x5&\x14\x2\x97\xA3\x3\x2\x2\x2\x98\x99\a\x13\x2\x2"+
		"\x99\x9A\a\x12\x2\x2\x9A\x9B\a\x38\x2\x2\x9B\xA3\x5&\x14\x2\x9C\x9D\a"+
		"\x13\x2\x2\x9D\xA0\x5\xE\b\x2\x9E\x9F\a\x4\x2\x2\x9F\xA1\x5\x10\t\x2\xA0"+
		"\x9E\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\xA3\x3\x2\x2\x2\xA2T\x3\x2\x2"+
		"\x2\xA2U\x3\x2\x2\x2\xA2Y\x3\x2\x2\x2\xA2Z\x3\x2\x2\x2\xA2[\x3\x2\x2\x2"+
		"\xA2_\x3\x2\x2\x2\xA2\x65\x3\x2\x2\x2\xA2j\x3\x2\x2\x2\xA2~\x3\x2\x2\x2"+
		"\xA2\x8C\x3\x2\x2\x2\xA2\x94\x3\x2\x2\x2\xA2\x98\x3\x2\x2\x2\xA2\x9C\x3"+
		"\x2\x2\x2\xA3\a\x3\x2\x2\x2\xA4\xA6\a\x14\x2\x2\xA5\xA7\x5\x10\t\x2\xA6"+
		"\xA5\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2\xA7\xA9\x3\x2\x2\x2\xA8\xAA\a\x3"+
		"\x2\x2\xA9\xA8\x3\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\t\x3\x2\x2\x2\xAB\xB0"+
		"\a\x38\x2\x2\xAC\xAD\a\x15\x2\x2\xAD\xAF\a\x38\x2\x2\xAE\xAC\x3\x2\x2"+
		"\x2\xAF\xB2\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB5"+
		"\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB3\xB4\a\x16\x2\x2\xB4\xB6\a\x38\x2"+
		"\x2\xB5\xB3\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\v\x3\x2\x2\x2\xB7\xBC"+
		"\x5\x1C\xF\x2\xB8\xB9\a\x10\x2\x2\xB9\xBB\x5\x1C\xF\x2\xBA\xB8\x3\x2\x2"+
		"\x2\xBB\xBE\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\r"+
		"\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBF\xC4\a\x38\x2\x2\xC0\xC1\a\x10\x2"+
		"\x2\xC1\xC3\a\x38\x2\x2\xC2\xC0\x3\x2\x2\x2\xC3\xC6\x3\x2\x2\x2\xC4\xC2"+
		"\x3\x2\x2\x2\xC4\xC5\x3\x2\x2\x2\xC5\xF\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2"+
		"\xC7\xCC\x5\x12\n\x2\xC8\xC9\a\x10\x2\x2\xC9\xCB\x5\x12\n\x2\xCA\xC8\x3"+
		"\x2\x2\x2\xCB\xCE\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2"+
		"\xCD\x11\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCF\xD0\b\n\x1\x2\xD0\xDA\x5"+
		"\x14\v\x2\xD1\xDA\x5\x44#\x2\xD2\xDA\x5\x46$\x2\xD3\xDA\x5$\x13\x2\xD4"+
		"\xDA\x5\x16\f\x2\xD5\xDA\x5*\x16\x2\xD6\xD7\x5@!\x2\xD7\xD8\x5\x12\n\n"+
		"\xD8\xDA\x3\x2\x2\x2\xD9\xCF\x3\x2\x2\x2\xD9\xD1\x3\x2\x2\x2\xD9\xD2\x3"+
		"\x2\x2\x2\xD9\xD3\x3\x2\x2\x2\xD9\xD4\x3\x2\x2\x2\xD9\xD5\x3\x2\x2\x2"+
		"\xD9\xD6\x3\x2\x2\x2\xDA\xFD\x3\x2\x2\x2\xDB\xDC\f\v\x2\x2\xDC\xDD\x5"+
		"\x42\"\x2\xDD\xDE\x5\x12\n\v\xDE\xFC\x3\x2\x2\x2\xDF\xE0\f\t\x2\x2\xE0"+
		"\xE1\x5<\x1F\x2\xE1\xE2\x5\x12\n\n\xE2\xFC\x3\x2\x2\x2\xE3\xE4\f\b\x2"+
		"\x2\xE4\xE5\x5:\x1E\x2\xE5\xE6\x5\x12\n\t\xE6\xFC\x3\x2\x2\x2\xE7\xE8"+
		"\f\a\x2\x2\xE8\xE9\x5\x38\x1D\x2\xE9\xEA\x5\x12\n\a\xEA\xFC\x3\x2\x2\x2"+
		"\xEB\xEC\f\x6\x2\x2\xEC\xED\x5\x36\x1C\x2\xED\xEE\x5\x12\n\a\xEE\xFC\x3"+
		"\x2\x2\x2\xEF\xF0\f\x5\x2\x2\xF0\xF1\x5\x34\x1B\x2\xF1\xF2\x5\x12\n\x6"+
		"\xF2\xFC\x3\x2\x2\x2\xF3\xF4\f\x4\x2\x2\xF4\xF5\x5\x32\x1A\x2\xF5\xF6"+
		"\x5\x12\n\x5\xF6\xFC\x3\x2\x2\x2\xF7\xF8\f\x3\x2\x2\xF8\xF9\x5> \x2\xF9"+
		"\xFA\x5\x12\n\x4\xFA\xFC\x3\x2\x2\x2\xFB\xDB\x3\x2\x2\x2\xFB\xDF\x3\x2"+
		"\x2\x2\xFB\xE3\x3\x2\x2\x2\xFB\xE7\x3\x2\x2\x2\xFB\xEB\x3\x2\x2\x2\xFB"+
		"\xEF\x3\x2\x2\x2\xFB\xF3\x3\x2\x2\x2\xFB\xF7\x3\x2\x2\x2\xFC\xFF\x3\x2"+
		"\x2\x2\xFD\xFB\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\x13\x3\x2\x2\x2\xFF"+
		"\xFD\x3\x2\x2\x2\x100\x101\t\x2\x2\x2\x101\x15\x3\x2\x2\x2\x102\x106\x5"+
		"\x1A\xE\x2\x103\x105\x5 \x11\x2\x104\x103\x3\x2\x2\x2\x105\x108\x3\x2"+
		"\x2\x2\x106\x104\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2\x107\x17\x3\x2\x2\x2"+
		"\x108\x106\x3\x2\x2\x2\x109\x10B\x5\x1A\xE\x2\x10A\x10C\x5 \x11\x2\x10B"+
		"\x10A\x3\x2\x2\x2\x10C\x10D\x3\x2\x2\x2\x10D\x10B\x3\x2\x2\x2\x10D\x10E"+
		"\x3\x2\x2\x2\x10E\x19\x3\x2\x2\x2\x10F\x115\x5\x1C\xF\x2\x110\x111\a\x1B"+
		"\x2\x2\x111\x112\x5\x12\n\x2\x112\x113\a\x1C\x2\x2\x113\x115\x3\x2\x2"+
		"\x2\x114\x10F\x3\x2\x2\x2\x114\x110\x3\x2\x2\x2\x115\x1B\x3\x2\x2\x2\x116"+
		"\x11D\a\x38\x2\x2\x117\x118\a\x1B\x2\x2\x118\x119\x5\x12\n\x2\x119\x11A"+
		"\a\x1C\x2\x2\x11A\x11B\x5\x1E\x10\x2\x11B\x11D\x3\x2\x2\x2\x11C\x116\x3"+
		"\x2\x2\x2\x11C\x117\x3\x2\x2\x2\x11D\x121\x3\x2\x2\x2\x11E\x120\x5\x1E"+
		"\x10\x2\x11F\x11E\x3\x2\x2\x2\x120\x123\x3\x2\x2\x2\x121\x11F\x3\x2\x2"+
		"\x2\x121\x122\x3\x2\x2\x2\x122\x1D\x3\x2\x2\x2\x123\x121\x3\x2\x2\x2\x124"+
		"\x126\x5 \x11\x2\x125\x124\x3\x2\x2\x2\x126\x129\x3\x2\x2\x2\x127\x125"+
		"\x3\x2\x2\x2\x127\x128\x3\x2\x2\x2\x128\x130\x3\x2\x2\x2\x129\x127\x3"+
		"\x2\x2\x2\x12A\x12B\a\x1D\x2\x2\x12B\x12C\x5\x12\n\x2\x12C\x12D\a\x1E"+
		"\x2\x2\x12D\x131\x3\x2\x2\x2\x12E\x12F\a\x15\x2\x2\x12F\x131\a\x38\x2"+
		"\x2\x130\x12A\x3\x2\x2\x2\x130\x12E\x3\x2\x2\x2\x131\x1F\x3\x2\x2\x2\x132"+
		"\x133\a\x16\x2\x2\x133\x135\a\x38\x2\x2\x134\x132\x3\x2\x2\x2\x134\x135"+
		"\x3\x2\x2\x2\x135\x136\x3\x2\x2\x2\x136\x137\x5\"\x12\x2\x137!\x3\x2\x2"+
		"\x2\x138\x13A\a\x1B\x2\x2\x139\x13B\x5\x10\t\x2\x13A\x139\x3\x2\x2\x2"+
		"\x13A\x13B\x3\x2\x2\x2\x13B\x13C\x3\x2\x2\x2\x13C\x140\a\x1C\x2\x2\x13D"+
		"\x140\x5*\x16\x2\x13E\x140\x5\x46$\x2\x13F\x138\x3\x2\x2\x2\x13F\x13D"+
		"\x3\x2\x2\x2\x13F\x13E\x3\x2\x2\x2\x140#\x3\x2\x2\x2\x141\x142\a\x12\x2"+
		"\x2\x142\x143\x5&\x14\x2\x143%\x3\x2\x2\x2\x144\x146\a\x1B\x2\x2\x145"+
		"\x147\x5(\x15\x2\x146\x145\x3\x2\x2\x2\x146\x147\x3\x2\x2\x2\x147\x148"+
		"\x3\x2\x2\x2\x148\x149\a\x1C\x2\x2\x149\x14A\x5\x4\x3\x2\x14A\x14B\a\a"+
		"\x2\x2\x14B\'\x3\x2\x2\x2\x14C\x14F\x5\xE\b\x2\x14D\x14E\a\x10\x2\x2\x14E"+
		"\x150\a\x1A\x2\x2\x14F\x14D\x3\x2\x2\x2\x14F\x150\x3\x2\x2\x2\x150\x153"+
		"\x3\x2\x2\x2\x151\x153\a\x1A\x2\x2\x152\x14C\x3\x2\x2\x2\x152\x151\x3"+
		"\x2\x2\x2\x153)\x3\x2\x2\x2\x154\x156\a\x1F\x2\x2\x155\x157\x5,\x17\x2"+
		"\x156\x155\x3\x2\x2\x2\x156\x157\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158"+
		"\x159\a \x2\x2\x159+\x3\x2\x2\x2\x15A\x160\x5.\x18\x2\x15B\x15C\x5\x30"+
		"\x19\x2\x15C\x15D\x5.\x18\x2\x15D\x15F\x3\x2\x2\x2\x15E\x15B\x3\x2\x2"+
		"\x2\x15F\x162\x3\x2\x2\x2\x160\x15E\x3\x2\x2\x2\x160\x161\x3\x2\x2\x2"+
		"\x161\x164\x3\x2\x2\x2\x162\x160\x3\x2\x2\x2\x163\x165\x5\x30\x19\x2\x164"+
		"\x163\x3\x2\x2\x2\x164\x165\x3\x2\x2\x2\x165-\x3\x2\x2\x2\x166\x167\a"+
		"\x1D\x2\x2\x167\x168\x5\x12\n\x2\x168\x169\a\x1E\x2\x2\x169\x16A\a\x4"+
		"\x2\x2\x16A\x16B\x5\x12\n\x2\x16B\x171\x3\x2\x2\x2\x16C\x16D\a\x38\x2"+
		"\x2\x16D\x16E\a\x4\x2\x2\x16E\x171\x5\x12\n\x2\x16F\x171\x5\x12\n\x2\x170"+
		"\x166\x3\x2\x2\x2\x170\x16C\x3\x2\x2\x2\x170\x16F\x3\x2\x2\x2\x171/\x3"+
		"\x2\x2\x2\x172\x173\t\x3\x2\x2\x173\x31\x3\x2\x2\x2\x174\x175\a!\x2\x2"+
		"\x175\x33\x3\x2\x2\x2\x176\x177\a\"\x2\x2\x177\x35\x3\x2\x2\x2\x178\x179"+
		"\t\x4\x2\x2\x179\x37\x3\x2\x2\x2\x17A\x17B\a)\x2\x2\x17B\x39\x3\x2\x2"+
		"\x2\x17C\x17D\t\x5\x2\x2\x17D;\x3\x2\x2\x2\x17E\x17F\t\x6\x2\x2\x17F="+
		"\x3\x2\x2\x2\x180\x181\t\a\x2\x2\x181?\x3\x2\x2\x2\x182\x183\t\b\x2\x2"+
		"\x183\x41\x3\x2\x2\x2\x184\x185\a\x37\x2\x2\x185\x43\x3\x2\x2\x2\x186"+
		"\x187\t\t\x2\x2\x187\x45\x3\x2\x2\x2\x188\x189\t\n\x2\x2\x189G\x3\x2\x2"+
		"\x2$NRuz\x86\xA0\xA2\xA6\xA9\xB0\xB5\xBC\xC4\xCC\xD9\xFB\xFD\x106\x10D"+
		"\x114\x11C\x121\x127\x130\x134\x13A\x13F\x146\x14F\x152\x156\x160\x164"+
		"\x170";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace zlua.AntlrGen
