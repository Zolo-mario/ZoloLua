//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5-beta001
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\91018\Desktop\zlua\zlua\Lua.g4 by ANTLR 4.6.5-beta001

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace zlua.Gen {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5-beta001")]
[System.CLSCompliant(false)]
public partial class LuaParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, NilKW=28, FalseKW=29, TrueKW=30, VarargKW=31, 
		NotKW=32, LenKW=33, MinusKW=34, MulKW=35, DivKW=36, ModKW=37, AddKW=38, 
		ConcatKW=39, LtKW=40, MtKW=41, LeKW=42, MeKW=43, NeKW=44, EqKW=45, AndKW=46, 
		OrKW=47, NAME=48, NORMALSTRING=49, CHARSTRING=50, LONGSTRING=51, INT=52, 
		HEX=53, FLOAT=54, COMMENT=55, LINE_COMMENT=56, WS=57, SHEBANG=58;
	public const int
		RULE_chunk = 0, RULE_block = 1, RULE_retstat = 2, RULE_stat = 3, RULE_elseifBlock = 4, 
		RULE_elseBlock = 5, RULE_funcname = 6, RULE_tableOrFunc = 7, RULE_methodname = 8, 
		RULE_varlist = 9, RULE_namelist = 10, RULE_explist = 11, RULE_doc = 12, 
		RULE_exp = 13, RULE_prefixexp = 14, RULE_functioncall = 15, RULE_varOrExp = 16, 
		RULE_var = 17, RULE_varSuffix = 18, RULE_nameAndArgs = 19, RULE_args = 20, 
		RULE_functiondef = 21, RULE_funcbody = 22, RULE_parlist = 23, RULE_tableconstructor = 24, 
		RULE_fieldlist = 25, RULE_field = 26, RULE_fieldsep = 27, RULE_number = 28, 
		RULE_string = 29;
	public static readonly string[] ruleNames = {
		"chunk", "block", "retstat", "stat", "elseifBlock", "elseBlock", "funcname", 
		"tableOrFunc", "methodname", "varlist", "namelist", "explist", "doc", 
		"exp", "prefixexp", "functioncall", "varOrExp", "var", "varSuffix", "nameAndArgs", 
		"args", "functiondef", "funcbody", "parlist", "tableconstructor", "fieldlist", 
		"field", "fieldsep", "number", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "'return'", "';'", "'='", "'break'", "'do'", "'end'", "'while'", 
		"'repeat'", "'until'", "'if'", "'then'", "'for'", "','", "'in'", "'function'", 
		"'local'", "'elseif'", "'else'", "'.'", "':'", "'^'", "'('", "')'", "'['", 
		"']'", "'{'", "'}'", "'nil'", "'false'", "'true'", "'...'", "'not'", "'#'", 
		"'-'", "'*'", "'/'", "'%'", "'+'", "'..'", "'<'", "'>'", "'<='", "'>='", 
		"'~='", "'=='", "'and'", "'or'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "NilKW", "FalseKW", "TrueKW", "VarargKW", "NotKW", 
		"LenKW", "MinusKW", "MulKW", "DivKW", "ModKW", "AddKW", "ConcatKW", "LtKW", 
		"MtKW", "LeKW", "MeKW", "NeKW", "EqKW", "AndKW", "OrKW", "NAME", "NORMALSTRING", 
		"CHARSTRING", "LONGSTRING", "INT", "HEX", "FLOAT", "COMMENT", "LINE_COMMENT", 
		"WS", "SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lua.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LuaParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ChunkContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(LuaParser.Eof, 0); }
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_chunk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; block();
			State = 61; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public RetstatContext retstat() {
			return GetRuleContext<RetstatContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__4) | (1L << T__6) | (1L << T__7) | (1L << T__9) | (1L << T__11) | (1L << T__14) | (1L << T__15) | (1L << T__21) | (1L << NAME))) != 0)) {
				{
				{
				State = 63; stat();
				}
				}
				State = 68;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 70;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__0) {
				{
				State = 69; retstat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetstatContext : ParserRuleContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public RetstatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retstat; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetstat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetstatContext retstat() {
		RetstatContext _localctx = new RetstatContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_retstat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(T__0);
			State = 74;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__21) | (1L << T__25) | (1L << NilKW) | (1L << FalseKW) | (1L << TrueKW) | (1L << VarargKW) | (1L << NotKW) | (1L << LenKW) | (1L << MinusKW) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT))) != 0)) {
				{
				State = 73; explist();
				}
			}

			State = 77;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 76; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	 
		public StatContext() { }
		public virtual void CopyFrom(StatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EmptyStatContext : StatContext {
		public EmptyStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStatContext : StatContext {
		public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public AssignStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctioncallStatContext : StatContext {
		public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public FunctioncallStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncallStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatContext : StatContext {
		public BreakStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoendStatContext : StatContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DoendStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoendStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatContext : StatContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RepeatStatContext : StatContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public RepeatStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfelseStatContext : StatContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseifBlockContext[] elseifBlock() {
			return GetRuleContexts<ElseifBlockContext>();
		}
		public ElseifBlockContext elseifBlock(int i) {
			return GetRuleContext<ElseifBlockContext>(i);
		}
		public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfelseStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfelseStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForijkStatContext : StatContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForijkStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForijkStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForinStatContext : StatContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForinStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForinStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctiondefStatContext : StatContext {
		public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctiondefStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondefStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LocalfunctiondefStatContext : StatContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public LocalfunctiondefStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalfunctiondefStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LocalassignStatContext : StatContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public LocalassignStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalassignStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_stat);
		int _la;
		try {
			State = 152;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				_localctx = new EmptyStatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 79; Match(T__1);
				}
				break;

			case 2:
				_localctx = new AssignStatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 80; varlist();
				State = 81; Match(T__2);
				State = 82; explist();
				}
				break;

			case 3:
				_localctx = new FunctioncallStatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 84; functioncall();
				}
				break;

			case 4:
				_localctx = new BreakStatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 85; Match(T__3);
				}
				break;

			case 5:
				_localctx = new DoendStatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 86; Match(T__4);
				State = 87; block();
				State = 88; Match(T__5);
				}
				break;

			case 6:
				_localctx = new WhileStatContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 90; Match(T__6);
				State = 91; exp(0);
				State = 92; Match(T__4);
				State = 93; block();
				State = 94; Match(T__5);
				}
				break;

			case 7:
				_localctx = new RepeatStatContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 96; Match(T__7);
				State = 97; block();
				State = 98; Match(T__8);
				State = 99; exp(0);
				}
				break;

			case 8:
				_localctx = new IfelseStatContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 101; Match(T__9);
				State = 102; exp(0);
				State = 103; Match(T__10);
				State = 104; block();
				State = 108;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__16) {
					{
					{
					State = 105; elseifBlock();
					}
					}
					State = 110;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 112;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__17) {
					{
					State = 111; elseBlock();
					}
				}

				State = 114; Match(T__5);
				}
				break;

			case 9:
				_localctx = new ForijkStatContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 116; Match(T__11);
				State = 117; Match(NAME);
				State = 118; Match(T__2);
				State = 119; exp(0);
				State = 120; Match(T__12);
				State = 121; exp(0);
				State = 124;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__12) {
					{
					State = 122; Match(T__12);
					State = 123; exp(0);
					}
				}

				State = 126; Match(T__4);
				State = 127; block();
				State = 128; Match(T__5);
				}
				break;

			case 10:
				_localctx = new ForinStatContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 130; Match(T__11);
				State = 131; namelist();
				State = 132; Match(T__13);
				State = 133; explist();
				State = 134; Match(T__4);
				State = 135; block();
				State = 136; Match(T__5);
				}
				break;

			case 11:
				_localctx = new FunctiondefStatContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 138; Match(T__14);
				State = 139; funcname();
				State = 140; funcbody();
				}
				break;

			case 12:
				_localctx = new LocalfunctiondefStatContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 142; Match(T__15);
				State = 143; Match(T__14);
				State = 144; Match(NAME);
				State = 145; funcbody();
				}
				break;

			case 13:
				_localctx = new LocalassignStatContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 146; Match(T__15);
				State = 147; namelist();
				State = 150;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__2) {
					{
					State = 148; Match(T__2);
					State = 149; explist();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifBlockContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseifBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifBlockContext elseifBlock() {
		ElseifBlockContext _localctx = new ElseifBlockContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_elseifBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; Match(T__16);
			State = 155; exp(0);
			State = 156; Match(T__10);
			State = 157; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; Match(T__17);
			State = 160; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public TableOrFuncContext tableOrFunc() {
			return GetRuleContext<TableOrFuncContext>(0);
		}
		public MethodnameContext methodname() {
			return GetRuleContext<MethodnameContext>(0);
		}
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_funcname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(NAME);
			State = 163; tableOrFunc();
			State = 164; methodname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableOrFuncContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(LuaParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(LuaParser.NAME, i);
		}
		public TableOrFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableOrFunc; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOrFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableOrFuncContext tableOrFunc() {
		TableOrFuncContext _localctx = new TableOrFuncContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_tableOrFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__18) {
				{
				{
				State = 166; Match(T__18);
				State = 167; Match(NAME);
				}
				}
				State = 172;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodnameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public MethodnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodname; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodnameContext methodname() {
		MethodnameContext _localctx = new MethodnameContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_methodname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__19) {
				{
				State = 173; Match(T__19);
				State = 174; Match(NAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_varlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; var();
			State = 182;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__12) {
				{
				{
				State = 178; Match(T__12);
				State = 179; var();
				}
				}
				State = 184;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(LuaParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(LuaParser.NAME, i);
		}
		public NamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamelistContext namelist() {
		NamelistContext _localctx = new NamelistContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_namelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(NAME);
			State = 190;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 186; Match(T__12);
					State = 187; Match(NAME);
					}
					} 
				}
				State = 192;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_explist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; exp(0);
			State = 198;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__12) {
				{
				{
				State = 194; Match(T__12);
				State = 195; exp(0);
				}
				}
				State = 200;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DocContext : ParserRuleContext {
		public ITerminalNode LONGSTRING() { return GetToken(LuaParser.LONGSTRING, 0); }
		public DocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doc; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocContext doc() {
		DocContext _localctx = new DocContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_doc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(LONGSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NilfalsetruevarargExpContext : ExpContext {
		public IToken nilfalsetruevararg;
		public NilfalsetruevarargExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNilfalsetruevarargExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExpContext : ExpContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NumberExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringExpContext : ExpContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public StringExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctiondefExpContext : ExpContext {
		public FunctiondefContext functiondef() {
			return GetRuleContext<FunctiondefContext>(0);
		}
		public FunctiondefExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondefExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixexpExpContext : ExpContext {
		public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		public PrefixexpExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixexpExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TablectorExpContext : ExpContext {
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public TablectorExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablectorExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowExpContext : ExpContext {
		public ExpContext lhs;
		public IToken operatorPower;
		public ExpContext rhs;
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public PowExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnmExpContext : ExpContext {
		public IToken operatorUnary;
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public UnmExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnmExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MuldivExpContext : ExpContext {
		public ExpContext lhs;
		public IToken operatorMulDivMod;
		public ExpContext rhs;
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public MuldivExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMuldivExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddsubExpContext : ExpContext {
		public ExpContext lhs;
		public IToken operatorAddSub;
		public ExpContext rhs;
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public AddsubExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddsubExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatExpContext : ExpContext {
		public ExpContext lhs;
		public IToken operatorStrcat;
		public ExpContext rhs;
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ConcatExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CmpExpContext : ExpContext {
		public ExpContext lhs;
		public IToken operatorComparison;
		public ExpContext rhs;
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public CmpExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmpExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpContext : ExpContext {
		public ExpContext lhs;
		public IToken operatorAnd;
		public ExpContext rhs;
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public AndExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpContext : ExpContext {
		public ExpContext lhs;
		public IToken operatorOr;
		public ExpContext rhs;
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OrExpContext(ExpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(_ctx, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_exp, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NilKW:
			case FalseKW:
			case TrueKW:
			case VarargKW:
				{
				_localctx = new NilfalsetruevarargExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 204;
				((NilfalsetruevarargExpContext)_localctx).nilfalsetruevararg = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NilKW) | (1L << FalseKW) | (1L << TrueKW) | (1L << VarargKW))) != 0)) ) {
					((NilfalsetruevarargExpContext)_localctx).nilfalsetruevararg = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case INT:
			case HEX:
			case FLOAT:
				{
				_localctx = new NumberExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 205; number();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				{
				_localctx = new StringExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 206; @string();
				}
				break;
			case T__14:
				{
				_localctx = new FunctiondefExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 207; functiondef();
				}
				break;
			case T__21:
			case NAME:
				{
				_localctx = new PrefixexpExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 208; prefixexp();
				}
				break;
			case T__25:
				{
				_localctx = new TablectorExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 209; tableconstructor();
				}
				break;
			case NotKW:
			case LenKW:
			case MinusKW:
				{
				_localctx = new UnmExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 210;
				((UnmExpContext)_localctx).operatorUnary = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NotKW) | (1L << LenKW) | (1L << MinusKW))) != 0)) ) {
					((UnmExpContext)_localctx).operatorUnary = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 211; exp(7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 237;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 235;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
					case 1:
						{
						_localctx = new PowExpContext(new ExpContext(_parentctx, _parentState));
						((PowExpContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 214;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 215; ((PowExpContext)_localctx).operatorPower = Match(T__20);
						State = 216; ((PowExpContext)_localctx).rhs = exp(8);
						}
						break;

					case 2:
						{
						_localctx = new MuldivExpContext(new ExpContext(_parentctx, _parentState));
						((MuldivExpContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 217;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 218;
						((MuldivExpContext)_localctx).operatorMulDivMod = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MulKW) | (1L << DivKW) | (1L << ModKW))) != 0)) ) {
							((MuldivExpContext)_localctx).operatorMulDivMod = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 219; ((MuldivExpContext)_localctx).rhs = exp(7);
						}
						break;

					case 3:
						{
						_localctx = new AddsubExpContext(new ExpContext(_parentctx, _parentState));
						((AddsubExpContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 220;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 221;
						((AddsubExpContext)_localctx).operatorAddSub = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==MinusKW || _la==AddKW) ) {
							((AddsubExpContext)_localctx).operatorAddSub = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 222; ((AddsubExpContext)_localctx).rhs = exp(6);
						}
						break;

					case 4:
						{
						_localctx = new ConcatExpContext(new ExpContext(_parentctx, _parentState));
						((ConcatExpContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 223;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 224; ((ConcatExpContext)_localctx).operatorStrcat = Match(ConcatKW);
						State = 225; ((ConcatExpContext)_localctx).rhs = exp(4);
						}
						break;

					case 5:
						{
						_localctx = new CmpExpContext(new ExpContext(_parentctx, _parentState));
						((CmpExpContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 226;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 227;
						((CmpExpContext)_localctx).operatorComparison = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LtKW) | (1L << MtKW) | (1L << LeKW) | (1L << MeKW) | (1L << NeKW) | (1L << EqKW))) != 0)) ) {
							((CmpExpContext)_localctx).operatorComparison = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 228; ((CmpExpContext)_localctx).rhs = exp(4);
						}
						break;

					case 6:
						{
						_localctx = new AndExpContext(new ExpContext(_parentctx, _parentState));
						((AndExpContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 229;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 230; ((AndExpContext)_localctx).operatorAnd = Match(AndKW);
						State = 231; ((AndExpContext)_localctx).rhs = exp(3);
						}
						break;

					case 7:
						{
						_localctx = new OrExpContext(new ExpContext(_parentctx, _parentState));
						((OrExpContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 232;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 233; ((OrExpContext)_localctx).operatorOr = Match(OrKW);
						State = 234; ((OrExpContext)_localctx).rhs = exp(2);
						}
						break;
					}
					} 
				}
				State = 239;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrefixexpContext : ParserRuleContext {
		public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public PrefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixexpContext prefixexp() {
		PrefixexpContext _localctx = new PrefixexpContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_prefixexp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; varOrExp();
			State = 244;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 241; nameAndArgs();
					}
					} 
				}
				State = 246;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_functioncall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; varOrExp();
			State = 249;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 248; nameAndArgs();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 251;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrExpContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarOrExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrExp; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrExpContext varOrExp() {
		VarOrExpContext _localctx = new VarOrExpContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_varOrExp);
		try {
			State = 258;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 253; var();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 254; Match(T__21);
				State = 255; exp(0);
				State = 256; Match(T__22);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarSuffixContext[] varSuffix() {
			return GetRuleContexts<VarSuffixContext>();
		}
		public VarSuffixContext varSuffix(int i) {
			return GetRuleContext<VarSuffixContext>(i);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_var);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NAME:
				{
				State = 260; Match(NAME);
				}
				break;
			case T__21:
				{
				State = 261; Match(T__21);
				State = 262; exp(0);
				State = 263; Match(T__22);
				State = 264; varSuffix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 271;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 268; varSuffix();
					}
					} 
				}
				State = 273;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSuffixContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public VarSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSuffix; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarSuffixContext varSuffix() {
		VarSuffixContext _localctx = new VarSuffixContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_varSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__19) | (1L << T__21) | (1L << T__25) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) {
				{
				{
				State = 274; nameAndArgs();
				}
				}
				State = 279;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 286;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__23:
				{
				State = 280; Match(T__23);
				State = 281; exp(0);
				State = 282; Match(T__24);
				}
				break;
			case T__18:
				{
				State = 284; Match(T__18);
				State = 285; Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameAndArgsContext : ParserRuleContext {
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public NameAndArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameAndArgs; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameAndArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameAndArgsContext nameAndArgs() {
		NameAndArgsContext _localctx = new NameAndArgsContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_nameAndArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__19) {
				{
				State = 288; Match(T__19);
				State = 289; Match(NAME);
				}
			}

			State = 292; args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
	 
		public ArgsContext() { }
		public virtual void CopyFrom(ArgsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NormalArgsContext : ArgsContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public NormalArgsContext(ArgsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalArgs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TablectorArgsContext : ArgsContext {
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public TablectorArgsContext(ArgsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablectorArgs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringArgsContext : ArgsContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public StringArgsContext(ArgsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_args);
		int _la;
		try {
			State = 301;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__21:
				_localctx = new NormalArgsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 294; Match(T__21);
				State = 296;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__21) | (1L << T__25) | (1L << NilKW) | (1L << FalseKW) | (1L << TrueKW) | (1L << VarargKW) | (1L << NotKW) | (1L << LenKW) | (1L << MinusKW) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT))) != 0)) {
					{
					State = 295; explist();
					}
				}

				State = 298; Match(T__22);
				}
				break;
			case T__25:
				_localctx = new TablectorArgsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 299; tableconstructor();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				_localctx = new StringArgsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 300; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefContext : ParserRuleContext {
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondef; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefContext functiondef() {
		FunctiondefContext _localctx = new FunctiondefContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; Match(T__14);
			State = 304; funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncbodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		public FuncbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcbody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncbodyContext funcbody() {
		FuncbodyContext _localctx = new FuncbodyContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_funcbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; Match(T__21);
			State = 308;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==VarargKW || _la==NAME) {
				{
				State = 307; parlist();
				}
			}

			State = 310; Match(T__22);
			State = 311; block();
			State = 312; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParlistContext : ParserRuleContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ParlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parlist; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParlistContext parlist() {
		ParlistContext _localctx = new ParlistContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_parlist);
		int _la;
		try {
			State = 320;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 314; namelist();
				State = 317;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__12) {
					{
					State = 315; Match(T__12);
					State = 316; Match(VarargKW);
					}
				}

				}
				break;
			case VarargKW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 319; Match(VarargKW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstructorContext : ParserRuleContext {
		public FieldlistContext fieldlist() {
			return GetRuleContext<FieldlistContext>(0);
		}
		public TableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstructor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableconstructorContext tableconstructor() {
		TableconstructorContext _localctx = new TableconstructorContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_tableconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; Match(T__25);
			State = 324;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__21) | (1L << T__23) | (1L << T__25) | (1L << NilKW) | (1L << FalseKW) | (1L << TrueKW) | (1L << VarargKW) | (1L << NotKW) | (1L << LenKW) | (1L << MinusKW) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT))) != 0)) {
				{
				State = 323; fieldlist();
				}
			}

			State = 326; Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsepContext[] fieldsep() {
			return GetRuleContexts<FieldsepContext>();
		}
		public FieldsepContext fieldsep(int i) {
			return GetRuleContext<FieldsepContext>(i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_fieldlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; field();
			State = 334;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 329; fieldsep();
					State = 330; field();
					}
					} 
				}
				State = 336;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			}
			State = 338;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__1 || _la==T__12) {
				{
				State = 337; fieldsep();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_field);
		try {
			State = 350;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 340; Match(T__23);
				State = 341; exp(0);
				State = 342; Match(T__24);
				State = 343; Match(T__2);
				State = 344; exp(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 346; Match(NAME);
				State = 347; Match(T__2);
				State = 348; exp(0);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 349; exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsepContext : ParserRuleContext {
		public FieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsep; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsepContext fieldsep() {
		FieldsepContext _localctx = new FieldsepContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_fieldsep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			_la = _input.La(1);
			if ( !(_la==T__1 || _la==T__12) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(LuaParser.INT, 0); }
		public ITerminalNode HEX() { return GetToken(LuaParser.HEX, 0); }
		public ITerminalNode FLOAT() { return GetToken(LuaParser.FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << FLOAT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode NORMALSTRING() { return GetToken(LuaParser.NORMALSTRING, 0); }
		public ITerminalNode CHARSTRING() { return GetToken(LuaParser.CHARSTRING, 0); }
		public ITerminalNode LONGSTRING() { return GetToken(LuaParser.LONGSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 8);

		case 1: return Precpred(_ctx, 6);

		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);

		case 4: return Precpred(_ctx, 3);

		case 5: return Precpred(_ctx, 2);

		case 6: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3<\x169\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x3\x2\x3\x2"+
		"\x3\x2\x3\x3\a\x3\x43\n\x3\f\x3\xE\x3\x46\v\x3\x3\x3\x5\x3I\n\x3\x3\x4"+
		"\x3\x4\x5\x4M\n\x4\x3\x4\x5\x4P\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\a\x5m\n\x5"+
		"\f\x5\xE\x5p\v\x5\x3\x5\x5\x5s\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x7F\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x99\n\x5\x5\x5\x9B"+
		"\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b"+
		"\x3\t\x3\t\a\t\xAB\n\t\f\t\xE\t\xAE\v\t\x3\n\x3\n\x5\n\xB2\n\n\x3\v\x3"+
		"\v\x3\v\a\v\xB7\n\v\f\v\xE\v\xBA\v\v\x3\f\x3\f\x3\f\a\f\xBF\n\f\f\f\xE"+
		"\f\xC2\v\f\x3\r\x3\r\x3\r\a\r\xC7\n\r\f\r\xE\r\xCA\v\r\x3\xE\x3\xE\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xD7\n\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\xEE\n\xF\f"+
		"\xF\xE\xF\xF1\v\xF\x3\x10\x3\x10\a\x10\xF5\n\x10\f\x10\xE\x10\xF8\v\x10"+
		"\x3\x11\x3\x11\x6\x11\xFC\n\x11\r\x11\xE\x11\xFD\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x5\x12\x105\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x5\x13\x10D\n\x13\x3\x13\a\x13\x110\n\x13\f\x13\xE\x13\x113\v\x13"+
		"\x3\x14\a\x14\x116\n\x14\f\x14\xE\x14\x119\v\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x5\x14\x121\n\x14\x3\x15\x3\x15\x5\x15\x125\n\x15"+
		"\x3\x15\x3\x15\x3\x16\x3\x16\x5\x16\x12B\n\x16\x3\x16\x3\x16\x3\x16\x5"+
		"\x16\x130\n\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x5\x18\x137\n\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x5\x19\x140\n\x19\x3\x19"+
		"\x5\x19\x143\n\x19\x3\x1A\x3\x1A\x5\x1A\x147\n\x1A\x3\x1A\x3\x1A\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\a\x1B\x14F\n\x1B\f\x1B\xE\x1B\x152\v\x1B\x3\x1B"+
		"\x5\x1B\x155\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x5\x1C\x161\n\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F"+
		"\x3\x1F\x3\x1F\x2\x2\x3\x1C \x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10"+
		"\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2"+
		"(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2\x2\n\x3\x2"+
		"\x1E!\x3\x2\"$\x3\x2%\'\x4\x2$$((\x3\x2*/\x4\x2\x4\x4\xF\xF\x3\x2\x36"+
		"\x38\x3\x2\x33\x35\x183\x2>\x3\x2\x2\x2\x4\x44\x3\x2\x2\x2\x6J\x3\x2\x2"+
		"\x2\b\x9A\x3\x2\x2\x2\n\x9C\x3\x2\x2\x2\f\xA1\x3\x2\x2\x2\xE\xA4\x3\x2"+
		"\x2\x2\x10\xAC\x3\x2\x2\x2\x12\xB1\x3\x2\x2\x2\x14\xB3\x3\x2\x2\x2\x16"+
		"\xBB\x3\x2\x2\x2\x18\xC3\x3\x2\x2\x2\x1A\xCB\x3\x2\x2\x2\x1C\xD6\x3\x2"+
		"\x2\x2\x1E\xF2\x3\x2\x2\x2 \xF9\x3\x2\x2\x2\"\x104\x3\x2\x2\x2$\x10C\x3"+
		"\x2\x2\x2&\x117\x3\x2\x2\x2(\x124\x3\x2\x2\x2*\x12F\x3\x2\x2\x2,\x131"+
		"\x3\x2\x2\x2.\x134\x3\x2\x2\x2\x30\x142\x3\x2\x2\x2\x32\x144\x3\x2\x2"+
		"\x2\x34\x14A\x3\x2\x2\x2\x36\x160\x3\x2\x2\x2\x38\x162\x3\x2\x2\x2:\x164"+
		"\x3\x2\x2\x2<\x166\x3\x2\x2\x2>?\x5\x4\x3\x2?@\a\x2\x2\x3@\x3\x3\x2\x2"+
		"\x2\x41\x43\x5\b\x5\x2\x42\x41\x3\x2\x2\x2\x43\x46\x3\x2\x2\x2\x44\x42"+
		"\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45H\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2"+
		"GI\x5\x6\x4\x2HG\x3\x2\x2\x2HI\x3\x2\x2\x2I\x5\x3\x2\x2\x2JL\a\x3\x2\x2"+
		"KM\x5\x18\r\x2LK\x3\x2\x2\x2LM\x3\x2\x2\x2MO\x3\x2\x2\x2NP\a\x4\x2\x2"+
		"ON\x3\x2\x2\x2OP\x3\x2\x2\x2P\a\x3\x2\x2\x2Q\x9B\a\x4\x2\x2RS\x5\x14\v"+
		"\x2ST\a\x5\x2\x2TU\x5\x18\r\x2U\x9B\x3\x2\x2\x2V\x9B\x5 \x11\x2W\x9B\a"+
		"\x6\x2\x2XY\a\a\x2\x2YZ\x5\x4\x3\x2Z[\a\b\x2\x2[\x9B\x3\x2\x2\x2\\]\a"+
		"\t\x2\x2]^\x5\x1C\xF\x2^_\a\a\x2\x2_`\x5\x4\x3\x2`\x61\a\b\x2\x2\x61\x9B"+
		"\x3\x2\x2\x2\x62\x63\a\n\x2\x2\x63\x64\x5\x4\x3\x2\x64\x65\a\v\x2\x2\x65"+
		"\x66\x5\x1C\xF\x2\x66\x9B\x3\x2\x2\x2gh\a\f\x2\x2hi\x5\x1C\xF\x2ij\a\r"+
		"\x2\x2jn\x5\x4\x3\x2km\x5\n\x6\x2lk\x3\x2\x2\x2mp\x3\x2\x2\x2nl\x3\x2"+
		"\x2\x2no\x3\x2\x2\x2or\x3\x2\x2\x2pn\x3\x2\x2\x2qs\x5\f\a\x2rq\x3\x2\x2"+
		"\x2rs\x3\x2\x2\x2st\x3\x2\x2\x2tu\a\b\x2\x2u\x9B\x3\x2\x2\x2vw\a\xE\x2"+
		"\x2wx\a\x32\x2\x2xy\a\x5\x2\x2yz\x5\x1C\xF\x2z{\a\xF\x2\x2{~\x5\x1C\xF"+
		"\x2|}\a\xF\x2\x2}\x7F\x5\x1C\xF\x2~|\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F"+
		"\x80\x3\x2\x2\x2\x80\x81\a\a\x2\x2\x81\x82\x5\x4\x3\x2\x82\x83\a\b\x2"+
		"\x2\x83\x9B\x3\x2\x2\x2\x84\x85\a\xE\x2\x2\x85\x86\x5\x16\f\x2\x86\x87"+
		"\a\x10\x2\x2\x87\x88\x5\x18\r\x2\x88\x89\a\a\x2\x2\x89\x8A\x5\x4\x3\x2"+
		"\x8A\x8B\a\b\x2\x2\x8B\x9B\x3\x2\x2\x2\x8C\x8D\a\x11\x2\x2\x8D\x8E\x5"+
		"\xE\b\x2\x8E\x8F\x5.\x18\x2\x8F\x9B\x3\x2\x2\x2\x90\x91\a\x12\x2\x2\x91"+
		"\x92\a\x11\x2\x2\x92\x93\a\x32\x2\x2\x93\x9B\x5.\x18\x2\x94\x95\a\x12"+
		"\x2\x2\x95\x98\x5\x16\f\x2\x96\x97\a\x5\x2\x2\x97\x99\x5\x18\r\x2\x98"+
		"\x96\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x9B\x3\x2\x2\x2\x9AQ\x3\x2\x2"+
		"\x2\x9AR\x3\x2\x2\x2\x9AV\x3\x2\x2\x2\x9AW\x3\x2\x2\x2\x9AX\x3\x2\x2\x2"+
		"\x9A\\\x3\x2\x2\x2\x9A\x62\x3\x2\x2\x2\x9Ag\x3\x2\x2\x2\x9Av\x3\x2\x2"+
		"\x2\x9A\x84\x3\x2\x2\x2\x9A\x8C\x3\x2\x2\x2\x9A\x90\x3\x2\x2\x2\x9A\x94"+
		"\x3\x2\x2\x2\x9B\t\x3\x2\x2\x2\x9C\x9D\a\x13\x2\x2\x9D\x9E\x5\x1C\xF\x2"+
		"\x9E\x9F\a\r\x2\x2\x9F\xA0\x5\x4\x3\x2\xA0\v\x3\x2\x2\x2\xA1\xA2\a\x14"+
		"\x2\x2\xA2\xA3\x5\x4\x3\x2\xA3\r\x3\x2\x2\x2\xA4\xA5\a\x32\x2\x2\xA5\xA6"+
		"\x5\x10\t\x2\xA6\xA7\x5\x12\n\x2\xA7\xF\x3\x2\x2\x2\xA8\xA9\a\x15\x2\x2"+
		"\xA9\xAB\a\x32\x2\x2\xAA\xA8\x3\x2\x2\x2\xAB\xAE\x3\x2\x2\x2\xAC\xAA\x3"+
		"\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\x11\x3\x2\x2\x2\xAE\xAC\x3\x2\x2\x2"+
		"\xAF\xB0\a\x16\x2\x2\xB0\xB2\a\x32\x2\x2\xB1\xAF\x3\x2\x2\x2\xB1\xB2\x3"+
		"\x2\x2\x2\xB2\x13\x3\x2\x2\x2\xB3\xB8\x5$\x13\x2\xB4\xB5\a\xF\x2\x2\xB5"+
		"\xB7\x5$\x13\x2\xB6\xB4\x3\x2\x2\x2\xB7\xBA\x3\x2\x2\x2\xB8\xB6\x3\x2"+
		"\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\x15\x3\x2\x2\x2\xBA\xB8\x3\x2\x2\x2\xBB"+
		"\xC0\a\x32\x2\x2\xBC\xBD\a\xF\x2\x2\xBD\xBF\a\x32\x2\x2\xBE\xBC\x3\x2"+
		"\x2\x2\xBF\xC2\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1"+
		"\x17\x3\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC3\xC8\x5\x1C\xF\x2\xC4\xC5\a\xF"+
		"\x2\x2\xC5\xC7\x5\x1C\xF\x2\xC6\xC4\x3\x2\x2\x2\xC7\xCA\x3\x2\x2\x2\xC8"+
		"\xC6\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\x19\x3\x2\x2\x2\xCA\xC8\x3\x2"+
		"\x2\x2\xCB\xCC\a\x35\x2\x2\xCC\x1B\x3\x2\x2\x2\xCD\xCE\b\xF\x1\x2\xCE"+
		"\xD7\t\x2\x2\x2\xCF\xD7\x5:\x1E\x2\xD0\xD7\x5<\x1F\x2\xD1\xD7\x5,\x17"+
		"\x2\xD2\xD7\x5\x1E\x10\x2\xD3\xD7\x5\x32\x1A\x2\xD4\xD5\t\x3\x2\x2\xD5"+
		"\xD7\x5\x1C\xF\t\xD6\xCD\x3\x2\x2\x2\xD6\xCF\x3\x2\x2\x2\xD6\xD0\x3\x2"+
		"\x2\x2\xD6\xD1\x3\x2\x2\x2\xD6\xD2\x3\x2\x2\x2\xD6\xD3\x3\x2\x2\x2\xD6"+
		"\xD4\x3\x2\x2\x2\xD7\xEF\x3\x2\x2\x2\xD8\xD9\f\n\x2\x2\xD9\xDA\a\x17\x2"+
		"\x2\xDA\xEE\x5\x1C\xF\n\xDB\xDC\f\b\x2\x2\xDC\xDD\t\x4\x2\x2\xDD\xEE\x5"+
		"\x1C\xF\t\xDE\xDF\f\a\x2\x2\xDF\xE0\t\x5\x2\x2\xE0\xEE\x5\x1C\xF\b\xE1"+
		"\xE2\f\x6\x2\x2\xE2\xE3\a)\x2\x2\xE3\xEE\x5\x1C\xF\x6\xE4\xE5\f\x5\x2"+
		"\x2\xE5\xE6\t\x6\x2\x2\xE6\xEE\x5\x1C\xF\x6\xE7\xE8\f\x4\x2\x2\xE8\xE9"+
		"\a\x30\x2\x2\xE9\xEE\x5\x1C\xF\x5\xEA\xEB\f\x3\x2\x2\xEB\xEC\a\x31\x2"+
		"\x2\xEC\xEE\x5\x1C\xF\x4\xED\xD8\x3\x2\x2\x2\xED\xDB\x3\x2\x2\x2\xED\xDE"+
		"\x3\x2\x2\x2\xED\xE1\x3\x2\x2\x2\xED\xE4\x3\x2\x2\x2\xED\xE7\x3\x2\x2"+
		"\x2\xED\xEA\x3\x2\x2\x2\xEE\xF1\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2\xEF\xF0"+
		"\x3\x2\x2\x2\xF0\x1D\x3\x2\x2\x2\xF1\xEF\x3\x2\x2\x2\xF2\xF6\x5\"\x12"+
		"\x2\xF3\xF5\x5(\x15\x2\xF4\xF3\x3\x2\x2\x2\xF5\xF8\x3\x2\x2\x2\xF6\xF4"+
		"\x3\x2\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7\x1F\x3\x2\x2\x2\xF8\xF6\x3\x2\x2"+
		"\x2\xF9\xFB\x5\"\x12\x2\xFA\xFC\x5(\x15\x2\xFB\xFA\x3\x2\x2\x2\xFC\xFD"+
		"\x3\x2\x2\x2\xFD\xFB\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE!\x3\x2\x2\x2"+
		"\xFF\x105\x5$\x13\x2\x100\x101\a\x18\x2\x2\x101\x102\x5\x1C\xF\x2\x102"+
		"\x103\a\x19\x2\x2\x103\x105\x3\x2\x2\x2\x104\xFF\x3\x2\x2\x2\x104\x100"+
		"\x3\x2\x2\x2\x105#\x3\x2\x2\x2\x106\x10D\a\x32\x2\x2\x107\x108\a\x18\x2"+
		"\x2\x108\x109\x5\x1C\xF\x2\x109\x10A\a\x19\x2\x2\x10A\x10B\x5&\x14\x2"+
		"\x10B\x10D\x3\x2\x2\x2\x10C\x106\x3\x2\x2\x2\x10C\x107\x3\x2\x2\x2\x10D"+
		"\x111\x3\x2\x2\x2\x10E\x110\x5&\x14\x2\x10F\x10E\x3\x2\x2\x2\x110\x113"+
		"\x3\x2\x2\x2\x111\x10F\x3\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112%\x3\x2\x2"+
		"\x2\x113\x111\x3\x2\x2\x2\x114\x116\x5(\x15\x2\x115\x114\x3\x2\x2\x2\x116"+
		"\x119\x3\x2\x2\x2\x117\x115\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2\x118\x120"+
		"\x3\x2\x2\x2\x119\x117\x3\x2\x2\x2\x11A\x11B\a\x1A\x2\x2\x11B\x11C\x5"+
		"\x1C\xF\x2\x11C\x11D\a\x1B\x2\x2\x11D\x121\x3\x2\x2\x2\x11E\x11F\a\x15"+
		"\x2\x2\x11F\x121\a\x32\x2\x2\x120\x11A\x3\x2\x2\x2\x120\x11E\x3\x2\x2"+
		"\x2\x121\'\x3\x2\x2\x2\x122\x123\a\x16\x2\x2\x123\x125\a\x32\x2\x2\x124"+
		"\x122\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125\x126\x3\x2\x2\x2\x126\x127"+
		"\x5*\x16\x2\x127)\x3\x2\x2\x2\x128\x12A\a\x18\x2\x2\x129\x12B\x5\x18\r"+
		"\x2\x12A\x129\x3\x2\x2\x2\x12A\x12B\x3\x2\x2\x2\x12B\x12C\x3\x2\x2\x2"+
		"\x12C\x130\a\x19\x2\x2\x12D\x130\x5\x32\x1A\x2\x12E\x130\x5<\x1F\x2\x12F"+
		"\x128\x3\x2\x2\x2\x12F\x12D\x3\x2\x2\x2\x12F\x12E\x3\x2\x2\x2\x130+\x3"+
		"\x2\x2\x2\x131\x132\a\x11\x2\x2\x132\x133\x5.\x18\x2\x133-\x3\x2\x2\x2"+
		"\x134\x136\a\x18\x2\x2\x135\x137\x5\x30\x19\x2\x136\x135\x3\x2\x2\x2\x136"+
		"\x137\x3\x2\x2\x2\x137\x138\x3\x2\x2\x2\x138\x139\a\x19\x2\x2\x139\x13A"+
		"\x5\x4\x3\x2\x13A\x13B\a\b\x2\x2\x13B/\x3\x2\x2\x2\x13C\x13F\x5\x16\f"+
		"\x2\x13D\x13E\a\xF\x2\x2\x13E\x140\a!\x2\x2\x13F\x13D\x3\x2\x2\x2\x13F"+
		"\x140\x3\x2\x2\x2\x140\x143\x3\x2\x2\x2\x141\x143\a!\x2\x2\x142\x13C\x3"+
		"\x2\x2\x2\x142\x141\x3\x2\x2\x2\x143\x31\x3\x2\x2\x2\x144\x146\a\x1C\x2"+
		"\x2\x145\x147\x5\x34\x1B\x2\x146\x145\x3\x2\x2\x2\x146\x147\x3\x2\x2\x2"+
		"\x147\x148\x3\x2\x2\x2\x148\x149\a\x1D\x2\x2\x149\x33\x3\x2\x2\x2\x14A"+
		"\x150\x5\x36\x1C\x2\x14B\x14C\x5\x38\x1D\x2\x14C\x14D\x5\x36\x1C\x2\x14D"+
		"\x14F\x3\x2\x2\x2\x14E\x14B\x3\x2\x2\x2\x14F\x152\x3\x2\x2\x2\x150\x14E"+
		"\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2\x151\x154\x3\x2\x2\x2\x152\x150\x3"+
		"\x2\x2\x2\x153\x155\x5\x38\x1D\x2\x154\x153\x3\x2\x2\x2\x154\x155\x3\x2"+
		"\x2\x2\x155\x35\x3\x2\x2\x2\x156\x157\a\x1A\x2\x2\x157\x158\x5\x1C\xF"+
		"\x2\x158\x159\a\x1B\x2\x2\x159\x15A\a\x5\x2\x2\x15A\x15B\x5\x1C\xF\x2"+
		"\x15B\x161\x3\x2\x2\x2\x15C\x15D\a\x32\x2\x2\x15D\x15E\a\x5\x2\x2\x15E"+
		"\x161\x5\x1C\xF\x2\x15F\x161\x5\x1C\xF\x2\x160\x156\x3\x2\x2\x2\x160\x15C"+
		"\x3\x2\x2\x2\x160\x15F\x3\x2\x2\x2\x161\x37\x3\x2\x2\x2\x162\x163\t\a"+
		"\x2\x2\x163\x39\x3\x2\x2\x2\x164\x165\t\b\x2\x2\x165;\x3\x2\x2\x2\x166"+
		"\x167\t\t\x2\x2\x167=\x3\x2\x2\x2$\x44HLOnr~\x98\x9A\xAC\xB1\xB8\xC0\xC8"+
		"\xD6\xED\xEF\xF6\xFD\x104\x10C\x111\x117\x120\x124\x12A\x12F\x136\x13F"+
		"\x142\x146\x150\x154\x160";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace zlua.Gen
