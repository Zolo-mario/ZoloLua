//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/91018/PycharmProjects/XASM_Assembler/_gen\Lua.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace _gen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class LuaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, NAME=50, NORMALSTRING=51, CHARSTRING=52, 
		LONGSTRING=53, INT=54, HEX=55, FLOAT=56, HEX_FLOAT=57, COMMENT=58, LINE_COMMENT=59, 
		WS=60, SHEBANG=61;
	public const int
		RULE_chunk = 0, RULE_block = 1, RULE_stat = 2, RULE_retstat = 3, RULE_funcname = 4, 
		RULE_varlist = 5, RULE_namelist = 6, RULE_explist = 7, RULE_exp = 8, RULE_prefixexp = 9, 
		RULE_functioncall = 10, RULE_varOrExp = 11, RULE_var = 12, RULE_varSuffix = 13, 
		RULE_nameAndArgs = 14, RULE_args = 15, RULE_functiondef = 16, RULE_funcbody = 17, 
		RULE_parlist = 18, RULE_tableconstructor = 19, RULE_fieldlist = 20, RULE_field = 21, 
		RULE_fieldsep = 22, RULE_operatorOr = 23, RULE_operatorAnd = 24, RULE_operatorComparison = 25, 
		RULE_operatorStrcat = 26, RULE_operatorAddSub = 27, RULE_operatorMulDivMod = 28, 
		RULE_operatorBitwise = 29, RULE_operatorUnary = 30, RULE_operatorPower = 31, 
		RULE_number = 32, RULE_string = 33;
	public static readonly string[] ruleNames = {
		"chunk", "block", "stat", "retstat", "funcname", "varlist", "namelist", 
		"explist", "exp", "prefixexp", "functioncall", "varOrExp", "var", "varSuffix", 
		"nameAndArgs", "args", "functiondef", "funcbody", "parlist", "tableconstructor", 
		"fieldlist", "field", "fieldsep", "operatorOr", "operatorAnd", "operatorComparison", 
		"operatorStrcat", "operatorAddSub", "operatorMulDivMod", "operatorBitwise", 
		"operatorUnary", "operatorPower", "number", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'break'", "'do'", "'end'", "'while'", "'if'", "'then'", 
		"'elseif'", "'else'", "'function'", "'global'", "'return'", "'.'", "':'", 
		"','", "'nil'", "'false'", "'true'", "'('", "')'", "'['", "']'", "'...'", 
		"'{'", "'}'", "'or'", "'and'", "'<'", "'>'", "'<='", "'>='", "'~='", "'=='", 
		"'..'", "'+'", "'-'", "'*'", "'/'", "'%'", "'//'", "'&'", "'|'", "'~'", 
		"'<<'", "'>>'", "'not'", "'#'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "NAME", "NORMALSTRING", "CHARSTRING", "LONGSTRING", "INT", 
		"HEX", "FLOAT", "HEX_FLOAT", "COMMENT", "LINE_COMMENT", "WS", "SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lua.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LuaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LuaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LuaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ChunkContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(LuaParser.Eof, 0); }
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterChunk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitChunk(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(Context, State);
		EnterRule(_localctx, 0, RULE_chunk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; block();
			State = 69; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public RetstatContext retstat() {
			return GetRuleContext<RetstatContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__5) | (1L << T__6) | (1L << T__10) | (1L << T__11) | (1L << T__19) | (1L << NAME))) != 0)) {
				{
				{
				State = 71; stat();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 77; retstat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	 
		public StatContext() { }
		public virtual void CopyFrom(StatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Do_end_statContext : StatContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Do_end_statContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterDo_end_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitDo_end_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDo_end_stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Assign_statContext : StatContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Assign_statContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterAssign_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitAssign_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Break_statContext : StatContext {
		public Break_statContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterBreak_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitBreak_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class While_statContext : StatContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public While_statContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterWhile_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitWhile_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Func_def_statContext : StatContext {
		public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public Func_def_statContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFunc_def_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFunc_def_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_def_stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Func_call_statContext : StatContext {
		public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public Func_call_statContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFunc_call_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFunc_call_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_call_stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Global_func_def_statContext : StatContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public Global_func_def_statContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterGlobal_func_def_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitGlobal_func_def_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_func_def_stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Empty_statContext : StatContext {
		public Empty_statContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterEmpty_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitEmpty_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Global_var_statContext : StatContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Global_var_statContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterGlobal_var_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitGlobal_var_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_var_stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class If_statContext : StatContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public If_statContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterIf_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitIf_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 4, RULE_stat);
		int _la;
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new Empty_statContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 80; Match(T__0);
				}
				break;
			case 2:
				_localctx = new Assign_statContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 81; var();
				State = 82; Match(T__1);
				State = 83; exp(0);
				}
				break;
			case 3:
				_localctx = new Func_call_statContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 85; functioncall();
				}
				break;
			case 4:
				_localctx = new Break_statContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 86; Match(T__2);
				}
				break;
			case 5:
				_localctx = new Do_end_statContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 87; Match(T__3);
				State = 88; block();
				State = 89; Match(T__4);
				}
				break;
			case 6:
				_localctx = new While_statContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 91; Match(T__5);
				State = 92; exp(0);
				State = 93; Match(T__3);
				State = 94; block();
				State = 95; Match(T__4);
				}
				break;
			case 7:
				_localctx = new If_statContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 97; Match(T__6);
				State = 98; exp(0);
				State = 99; Match(T__7);
				State = 100; block();
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__8) {
					{
					{
					State = 101; Match(T__8);
					State = 102; exp(0);
					State = 103; Match(T__7);
					State = 104; block();
					}
					}
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 111; Match(T__9);
					State = 112; block();
					}
				}

				State = 115; Match(T__4);
				}
				break;
			case 8:
				_localctx = new Func_def_statContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 117; Match(T__10);
				State = 118; funcname();
				State = 119; funcbody();
				}
				break;
			case 9:
				_localctx = new Global_func_def_statContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 121; Match(T__11);
				State = 122; Match(T__10);
				State = 123; Match(NAME);
				State = 124; funcbody();
				}
				break;
			case 10:
				_localctx = new Global_var_statContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 125; Match(T__11);
				State = 126; var();
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 127; Match(T__1);
					State = 128; exp(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetstatContext : ParserRuleContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public RetstatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retstat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterRetstat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitRetstat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetstat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetstatContext retstat() {
		RetstatContext _localctx = new RetstatContext(Context, State);
		EnterRule(_localctx, 6, RULE_retstat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(T__12);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__24) | (1L << T__36) | (1L << T__43) | (1L << T__46) | (1L << T__47) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << FLOAT))) != 0)) {
				{
				State = 134; explist();
				}
			}

			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 137; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(LuaParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(LuaParser.NAME, i);
		}
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFuncname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFuncname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(Context, State);
		EnterRule(_localctx, 8, RULE_funcname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(NAME);
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__13) {
				{
				{
				State = 141; Match(T__13);
				State = 142; Match(NAME);
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 148; Match(T__14);
				State = 149; Match(NAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVarlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVarlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(Context, State);
		EnterRule(_localctx, 10, RULE_varlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; var();
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 153; Match(T__15);
				State = 154; var();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(LuaParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(LuaParser.NAME, i);
		}
		public NamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNamelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNamelist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamelistContext namelist() {
		NamelistContext _localctx = new NamelistContext(Context, State);
		EnterRule(_localctx, 12, RULE_namelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(NAME);
			State = 165;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 161; Match(T__15);
					State = 162; Match(NAME);
					}
					} 
				}
				State = 167;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterExplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitExplist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(Context, State);
		EnterRule(_localctx, 14, RULE_explist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; exp(0);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 169; Match(T__15);
				State = 170; exp(0);
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Op_and_expContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorAndContext operatorAnd() {
			return GetRuleContext<OperatorAndContext>(0);
		}
		public Op_and_expContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOp_and_exp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOp_and_exp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_and_exp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Op_or_expContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorOrContext operatorOr() {
			return GetRuleContext<OperatorOrContext>(0);
		}
		public Op_or_expContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOp_or_exp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOp_or_exp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_or_exp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Num_expContext : ExpContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public Num_expContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNum_exp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNum_exp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_exp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Prefix_exp_expContext : ExpContext {
		public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		public Prefix_exp_expContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterPrefix_exp_exp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitPrefix_exp_exp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_exp_exp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Op_mul_div_expContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		public Op_mul_div_expContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOp_mul_div_exp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOp_mul_div_exp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_mul_div_exp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Table_ctor_expContext : ExpContext {
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public Table_ctor_expContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterTable_ctor_exp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitTable_ctor_exp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_ctor_exp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Op_concat_expContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorStrcatContext operatorStrcat() {
			return GetRuleContext<OperatorStrcatContext>(0);
		}
		public Op_concat_expContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOp_concat_exp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOp_concat_exp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_concat_exp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class String_expContext : ExpContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public String_expContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterString_exp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitString_exp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_exp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class False_expContext : ExpContext {
		public False_expContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFalse_exp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFalse_exp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalse_exp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Op_add_sub_expContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		public Op_add_sub_expContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOp_add_sub_exp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOp_add_sub_exp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_add_sub_exp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Nil_expContext : ExpContext {
		public Nil_expContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNil_exp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNil_exp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNil_exp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Op_unary_expContext : ExpContext {
		public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Op_unary_expContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOp_unary_exp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOp_unary_exp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_unary_exp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Op_caompare_expContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		public Op_caompare_expContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOp_caompare_exp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOp_caompare_exp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_caompare_exp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class True_expContext : ExpContext {
		public True_expContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterTrue_exp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitTrue_exp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrue_exp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Func_def_expContext : ExpContext {
		public FunctiondefContext functiondef() {
			return GetRuleContext<FunctiondefContext>(0);
		}
		public Func_def_expContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFunc_def_exp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFunc_def_exp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_def_exp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				{
				_localctx = new Nil_expContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 177; Match(T__16);
				}
				break;
			case T__17:
				{
				_localctx = new False_expContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 178; Match(T__17);
				}
				break;
			case T__18:
				{
				_localctx = new True_expContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 179; Match(T__18);
				}
				break;
			case INT:
			case FLOAT:
				{
				_localctx = new Num_expContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 180; number();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				{
				_localctx = new String_expContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 181; @string();
				}
				break;
			case T__10:
				{
				_localctx = new Func_def_expContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 182; functiondef();
				}
				break;
			case T__19:
			case NAME:
				{
				_localctx = new Prefix_exp_expContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 183; prefixexp();
				}
				break;
			case T__24:
				{
				_localctx = new Table_ctor_expContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 184; tableconstructor();
				}
				break;
			case T__36:
			case T__43:
			case T__46:
			case T__47:
				{
				_localctx = new Op_unary_expContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 185; operatorUnary();
				State = 186; exp(7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 216;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 214;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new Op_mul_div_expContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 190;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 191; operatorMulDivMod();
						State = 192; exp(7);
						}
						break;
					case 2:
						{
						_localctx = new Op_add_sub_expContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 194;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 195; operatorAddSub();
						State = 196; exp(6);
						}
						break;
					case 3:
						{
						_localctx = new Op_concat_expContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 198;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 199; operatorStrcat();
						State = 200; exp(4);
						}
						break;
					case 4:
						{
						_localctx = new Op_caompare_expContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 202;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 203; operatorComparison();
						State = 204; exp(4);
						}
						break;
					case 5:
						{
						_localctx = new Op_and_expContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 206;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 207; operatorAnd();
						State = 208; exp(3);
						}
						break;
					case 6:
						{
						_localctx = new Op_or_expContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 210;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 211; operatorOr();
						State = 212; exp(2);
						}
						break;
					}
					} 
				}
				State = 218;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrefixexpContext : ParserRuleContext {
		public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public PrefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterPrefixexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitPrefixexp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixexpContext prefixexp() {
		PrefixexpContext _localctx = new PrefixexpContext(Context, State);
		EnterRule(_localctx, 18, RULE_prefixexp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; varOrExp();
			State = 223;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 220; nameAndArgs();
					}
					} 
				}
				State = 225;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFunctioncall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFunctioncall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 20, RULE_functioncall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; varOrExp();
			State = 228;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 227; nameAndArgs();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 230;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrExpContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarOrExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVarOrExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVarOrExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrExpContext varOrExp() {
		VarOrExpContext _localctx = new VarOrExpContext(Context, State);
		EnterRule(_localctx, 22, RULE_varOrExp);
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 233; Match(T__19);
				State = 234; exp(0);
				State = 235; Match(T__20);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarSuffixContext[] varSuffix() {
			return GetRuleContexts<VarSuffixContext>();
		}
		public VarSuffixContext varSuffix(int i) {
			return GetRuleContext<VarSuffixContext>(i);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 24, RULE_var);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 239; Match(NAME);
				}
				break;
			case T__19:
				{
				State = 240; Match(T__19);
				State = 241; exp(0);
				State = 242; Match(T__20);
				State = 243; varSuffix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 250;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 247; varSuffix();
					}
					} 
				}
				State = 252;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSuffixContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public VarSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVarSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVarSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarSuffixContext varSuffix() {
		VarSuffixContext _localctx = new VarSuffixContext(Context, State);
		EnterRule(_localctx, 26, RULE_varSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
				{
				State = 253; Match(T__21);
				State = 254; exp(0);
				State = 255; Match(T__22);
				}
				break;
			case T__13:
				{
				State = 257; Match(T__13);
				State = 258; Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameAndArgsContext : ParserRuleContext {
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public NameAndArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameAndArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNameAndArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNameAndArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameAndArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameAndArgsContext nameAndArgs() {
		NameAndArgsContext _localctx = new NameAndArgsContext(Context, State);
		EnterRule(_localctx, 28, RULE_nameAndArgs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 30, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; Match(T__19);
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__24) | (1L << T__36) | (1L << T__43) | (1L << T__46) | (1L << T__47) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << FLOAT))) != 0)) {
				{
				State = 264; explist();
				}
			}

			State = 267; Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefContext : ParserRuleContext {
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFunctiondef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFunctiondef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefContext functiondef() {
		FunctiondefContext _localctx = new FunctiondefContext(Context, State);
		EnterRule(_localctx, 32, RULE_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269; Match(T__10);
			State = 270; funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncbodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		public FuncbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcbody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFuncbody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFuncbody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncbodyContext funcbody() {
		FuncbodyContext _localctx = new FuncbodyContext(Context, State);
		EnterRule(_localctx, 34, RULE_funcbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; Match(T__19);
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__23 || _la==NAME) {
				{
				State = 273; parlist();
				}
			}

			State = 276; Match(T__20);
			State = 277; block();
			State = 278; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParlistContext : ParserRuleContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ParlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterParlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitParlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParlistContext parlist() {
		ParlistContext _localctx = new ParlistContext(Context, State);
		EnterRule(_localctx, 36, RULE_parlist);
		int _la;
		try {
			State = 286;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 280; namelist();
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__15) {
					{
					State = 281; Match(T__15);
					State = 282; Match(T__23);
					}
				}

				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 2);
				{
				State = 285; Match(T__23);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstructorContext : ParserRuleContext {
		public FieldlistContext fieldlist() {
			return GetRuleContext<FieldlistContext>(0);
		}
		public TableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterTableconstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitTableconstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableconstructorContext tableconstructor() {
		TableconstructorContext _localctx = new TableconstructorContext(Context, State);
		EnterRule(_localctx, 38, RULE_tableconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(T__24);
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__21) | (1L << T__24) | (1L << T__36) | (1L << T__43) | (1L << T__46) | (1L << T__47) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << FLOAT))) != 0)) {
				{
				State = 289; fieldlist();
				}
			}

			State = 292; Match(T__25);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsepContext[] fieldsep() {
			return GetRuleContexts<FieldsepContext>();
		}
		public FieldsepContext fieldsep(int i) {
			return GetRuleContext<FieldsepContext>(i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFieldlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFieldlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(Context, State);
		EnterRule(_localctx, 40, RULE_fieldlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 294; field();
			State = 300;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 295; fieldsep();
					State = 296; field();
					}
					} 
				}
				State = 302;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__15) {
				{
				State = 303; fieldsep();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 42, RULE_field);
		try {
			State = 316;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 306; Match(T__21);
				State = 307; exp(0);
				State = 308; Match(T__22);
				State = 309; Match(T__1);
				State = 310; exp(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 312; Match(NAME);
				State = 313; Match(T__1);
				State = 314; exp(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 315; exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsepContext : ParserRuleContext {
		public FieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsep; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFieldsep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFieldsep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsepContext fieldsep() {
		FieldsepContext _localctx = new FieldsepContext(Context, State);
		EnterRule(_localctx, 44, RULE_fieldsep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__15) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOrContext : ParserRuleContext {
		public OperatorOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOrContext operatorOr() {
		OperatorOrContext _localctx = new OperatorOrContext(Context, State);
		EnterRule(_localctx, 46, RULE_operatorOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320; Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndContext : ParserRuleContext {
		public OperatorAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndContext operatorAnd() {
		OperatorAndContext _localctx = new OperatorAndContext(Context, State);
		EnterRule(_localctx, 48, RULE_operatorAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; Match(T__27);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(Context, State);
		EnterRule(_localctx, 50, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorStrcatContext : ParserRuleContext {
		public OperatorStrcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorStrcat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorStrcat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorStrcat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorStrcat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorStrcatContext operatorStrcat() {
		OperatorStrcatContext _localctx = new OperatorStrcatContext(Context, State);
		EnterRule(_localctx, 52, RULE_operatorStrcat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; Match(T__34);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(Context, State);
		EnterRule(_localctx, 54, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			_la = TokenStream.LA(1);
			if ( !(_la==T__35 || _la==T__36) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(Context, State);
		EnterRule(_localctx, 56, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorBitwiseContext : ParserRuleContext {
		public OperatorBitwiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorBitwise; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorBitwise(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorBitwise(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorBitwiseContext operatorBitwise() {
		OperatorBitwiseContext _localctx = new OperatorBitwiseContext(Context, State);
		EnterRule(_localctx, 58, RULE_operatorBitwise);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(Context, State);
		EnterRule(_localctx, 60, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__36) | (1L << T__43) | (1L << T__46) | (1L << T__47))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorPowerContext : ParserRuleContext {
		public OperatorPowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorPower; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorPower(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorPower(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorPowerContext operatorPower() {
		OperatorPowerContext _localctx = new OperatorPowerContext(Context, State);
		EnterRule(_localctx, 62, RULE_operatorPower);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; Match(T__48);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(LuaParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(LuaParser.FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 64, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode NORMALSTRING() { return GetToken(LuaParser.NORMALSTRING, 0); }
		public ITerminalNode CHARSTRING() { return GetToken(LuaParser.CHARSTRING, 0); }
		public ITerminalNode LONGSTRING() { return GetToken(LuaParser.LONGSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuaVisitor<TResult> typedVisitor = visitor as ILuaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 66, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '?', '\x159', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\a', '\x3', 'K', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'N', '\v', '\x3', 
		'\x3', '\x3', '\x5', '\x3', 'Q', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'm', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', 'p', '\v', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', 't', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x84', '\n', '\x4', '\x5', 
		'\x4', '\x86', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x8A', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', '\x8D', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x92', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', '\x95', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '\x99', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\a', '\a', '\x9E', '\n', '\a', '\f', '\a', '\xE', '\a', '\xA1', '\v', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\xA6', '\n', 
		'\b', '\f', '\b', '\xE', '\b', '\xA9', '\v', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\a', '\t', '\xAE', '\n', '\t', '\f', '\t', '\xE', 
		'\t', '\xB1', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xBF', '\n', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\a', '\n', '\xD9', '\n', '\n', '\f', '\n', 
		'\xE', '\n', '\xDC', '\v', '\n', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'\xE0', '\n', '\v', '\f', '\v', '\xE', '\v', '\xE3', '\v', '\v', '\x3', 
		'\f', '\x3', '\f', '\x6', '\f', '\xE7', '\n', '\f', '\r', '\f', '\xE', 
		'\f', '\xE8', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\xF0', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xF8', 
		'\n', '\xE', '\x3', '\xE', '\a', '\xE', '\xFB', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\xFE', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x106', 
		'\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x10C', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x115', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x11E', '\n', '\x14', '\x3', '\x14', '\x5', '\x14', '\x121', '\n', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x125', '\n', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\a', '\x16', '\x12D', '\n', '\x16', '\f', '\x16', '\xE', '\x16', 
		'\x130', '\v', '\x16', '\x3', '\x16', '\x5', '\x16', '\x133', '\n', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x13F', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x2', '\x3', '\x12', '$', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x2', '\n', '\x4', 
		'\x2', '\x3', '\x3', '\x12', '\x12', '\x3', '\x2', '\x1F', '$', '\x3', 
		'\x2', '&', '\'', '\x3', '\x2', '(', '+', '\x3', '\x2', ',', '\x30', '\x5', 
		'\x2', '\'', '\'', '.', '.', '\x31', '\x32', '\x4', '\x2', '\x38', '\x38', 
		':', ':', '\x3', '\x2', '\x35', '\x37', '\x2', '\x168', '\x2', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\x4', 'L', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\b', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x8E', '\x3', '\x2', '\x2', '\x2', '\f', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\x12', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\xDD', '\x3', '\x2', '\x2', '\x2', '\x16', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\xEF', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x107', '\x3', '\x2', '\x2', '\x2', ' ', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x10F', '\x3', '\x2', '\x2', '\x2', '$', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x120', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x122', '\x3', '\x2', '\x2', '\x2', '*', '\x128', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x13E', '\x3', '\x2', '\x2', '\x2', '.', '\x140', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x142', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x144', '\x3', '\x2', '\x2', '\x2', '\x34', '\x146', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x148', '\x3', '\x2', '\x2', '\x2', '\x38', '\x14A', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x14C', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x14E', '\x3', '\x2', '\x2', '\x2', '>', '\x150', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x152', '\x3', '\x2', '\x2', '\x2', '\x42', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x156', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'G', '\x5', '\x4', '\x3', '\x2', 'G', 'H', '\a', '\x2', '\x2', 
		'\x3', 'H', '\x3', '\x3', '\x2', '\x2', '\x2', 'I', 'K', '\x5', '\x6', 
		'\x4', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'P', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'Q', '\x5', '\b', '\x5', '\x2', 'P', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', '\x5', '\x3', 
		'\x2', '\x2', '\x2', 'R', '\x86', '\a', '\x3', '\x2', '\x2', 'S', 'T', 
		'\x5', '\x1A', '\xE', '\x2', 'T', 'U', '\a', '\x4', '\x2', '\x2', 'U', 
		'V', '\x5', '\x12', '\n', '\x2', 'V', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'W', '\x86', '\x5', '\x16', '\f', '\x2', 'X', '\x86', '\a', '\x5', '\x2', 
		'\x2', 'Y', 'Z', '\a', '\x6', '\x2', '\x2', 'Z', '[', '\x5', '\x4', '\x3', 
		'\x2', '[', '\\', '\a', '\a', '\x2', '\x2', '\\', '\x86', '\x3', '\x2', 
		'\x2', '\x2', ']', '^', '\a', '\b', '\x2', '\x2', '^', '_', '\x5', '\x12', 
		'\n', '\x2', '_', '`', '\a', '\x6', '\x2', '\x2', '`', '\x61', '\x5', 
		'\x4', '\x3', '\x2', '\x61', '\x62', '\a', '\a', '\x2', '\x2', '\x62', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\a', '\t', '\x2', 
		'\x2', '\x64', '\x65', '\x5', '\x12', '\n', '\x2', '\x65', '\x66', '\a', 
		'\n', '\x2', '\x2', '\x66', 'n', '\x5', '\x4', '\x3', '\x2', 'g', 'h', 
		'\a', '\v', '\x2', '\x2', 'h', 'i', '\x5', '\x12', '\n', '\x2', 'i', 'j', 
		'\a', '\n', '\x2', '\x2', 'j', 'k', '\x5', '\x4', '\x3', '\x2', 'k', 'm', 
		'\x3', '\x2', '\x2', '\x2', 'l', 'g', '\x3', '\x2', '\x2', '\x2', 'm', 
		'p', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', 's', '\x3', '\x2', '\x2', '\x2', 
		'p', 'n', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\a', '\f', '\x2', '\x2', 
		'r', 't', '\x5', '\x4', '\x3', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 
		's', 't', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 
		'u', 'v', '\a', '\a', '\x2', '\x2', 'v', '\x86', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'x', '\a', '\r', '\x2', '\x2', 'x', 'y', '\x5', '\n', '\x6', 
		'\x2', 'y', 'z', '\x5', '$', '\x13', '\x2', 'z', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '{', '|', '\a', '\xE', '\x2', '\x2', '|', '}', '\a', '\r', 
		'\x2', '\x2', '}', '~', '\a', '\x34', '\x2', '\x2', '~', '\x86', '\x5', 
		'$', '\x13', '\x2', '\x7F', '\x80', '\a', '\xE', '\x2', '\x2', '\x80', 
		'\x83', '\x5', '\x1A', '\xE', '\x2', '\x81', '\x82', '\a', '\x4', '\x2', 
		'\x2', '\x82', '\x84', '\x5', '\x12', '\n', '\x2', '\x83', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x84', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x85', 'R', '\x3', '\x2', '\x2', 
		'\x2', '\x85', 'S', '\x3', '\x2', '\x2', '\x2', '\x85', 'W', '\x3', '\x2', 
		'\x2', '\x2', '\x85', 'X', '\x3', '\x2', '\x2', '\x2', '\x85', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x85', ']', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x85', 'w', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '{', '\x3', '\x2', '\x2', '\x2', '\x85', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\a', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x89', '\a', '\xF', '\x2', '\x2', '\x88', '\x8A', '\x5', '\x10', '\t', 
		'\x2', '\x89', '\x88', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x8D', '\a', '\x3', '\x2', '\x2', '\x8C', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x93', '\a', '\x34', '\x2', '\x2', '\x8F', 
		'\x90', '\a', '\x10', '\x2', '\x2', '\x90', '\x92', '\a', '\x34', '\x2', 
		'\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\a', 
		'\x11', '\x2', '\x2', '\x97', '\x99', '\a', '\x34', '\x2', '\x2', '\x98', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\v', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9F', '\x5', 
		'\x1A', '\xE', '\x2', '\x9B', '\x9C', '\a', '\x12', '\x2', '\x2', '\x9C', 
		'\x9E', '\x5', '\x1A', '\xE', '\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA7', '\a', '\x34', '\x2', '\x2', '\xA3', '\xA4', '\a', 
		'\x12', '\x2', '\x2', '\xA4', '\xA6', '\a', '\x34', '\x2', '\x2', '\xA5', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xF', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAF', '\x5', '\x12', '\n', 
		'\x2', '\xAB', '\xAC', '\a', '\x12', '\x2', '\x2', '\xAC', '\xAE', '\x5', 
		'\x12', '\n', '\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB3', '\b', '\n', '\x1', '\x2', '\xB3', '\xBF', '\a', '\x13', '\x2', 
		'\x2', '\xB4', '\xBF', '\a', '\x14', '\x2', '\x2', '\xB5', '\xBF', '\a', 
		'\x15', '\x2', '\x2', '\xB6', '\xBF', '\x5', '\x42', '\"', '\x2', '\xB7', 
		'\xBF', '\x5', '\x44', '#', '\x2', '\xB8', '\xBF', '\x5', '\"', '\x12', 
		'\x2', '\xB9', '\xBF', '\x5', '\x14', '\v', '\x2', '\xBA', '\xBF', '\x5', 
		'(', '\x15', '\x2', '\xBB', '\xBC', '\x5', '>', ' ', '\x2', '\xBC', '\xBD', 
		'\x5', '\x12', '\n', '\t', '\xBD', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\xBF', '\xDA', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\xC1', '\f', '\b', '\x2', '\x2', '\xC1', '\xC2', '\x5', ':', 
		'\x1E', '\x2', '\xC2', '\xC3', '\x5', '\x12', '\n', '\t', '\xC3', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\f', '\a', '\x2', '\x2', 
		'\xC5', '\xC6', '\x5', '\x38', '\x1D', '\x2', '\xC6', '\xC7', '\x5', '\x12', 
		'\n', '\b', '\xC7', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', 
		'\f', '\x6', '\x2', '\x2', '\xC9', '\xCA', '\x5', '\x36', '\x1C', '\x2', 
		'\xCA', '\xCB', '\x5', '\x12', '\n', '\x6', '\xCB', '\xD9', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xCD', '\f', '\x5', '\x2', '\x2', '\xCD', '\xCE', 
		'\x5', '\x34', '\x1B', '\x2', '\xCE', '\xCF', '\x5', '\x12', '\n', '\x6', 
		'\xCF', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\f', '\x4', 
		'\x2', '\x2', '\xD1', '\xD2', '\x5', '\x32', '\x1A', '\x2', '\xD2', '\xD3', 
		'\x5', '\x12', '\n', '\x5', '\xD3', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xD5', '\f', '\x3', '\x2', '\x2', '\xD5', '\xD6', '\x5', '\x30', 
		'\x19', '\x2', '\xD6', '\xD7', '\x5', '\x12', '\n', '\x4', '\xD7', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\xD8', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD0', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\xD9', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD8', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', 
		'\xDD', '\xE1', '\x5', '\x18', '\r', '\x2', '\xDE', '\xE0', '\x5', '\x1E', 
		'\x10', '\x2', '\xDF', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE3', 
		'\x3', '\x2', '\x2', '\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', 
		'\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE2', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\xE3', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE6', 
		'\x5', '\x18', '\r', '\x2', '\xE5', '\xE7', '\x5', '\x1E', '\x10', '\x2', 
		'\xE6', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '\xE9', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\xEA', '\xF0', '\x5', '\x1A', '\xE', '\x2', '\xEB', '\xEC', '\a', '\x16', 
		'\x2', '\x2', '\xEC', '\xED', '\x5', '\x12', '\n', '\x2', '\xED', '\xEE', 
		'\a', '\x17', '\x2', '\x2', '\xEE', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'\xEF', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xEB', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\x19', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF8', 
		'\a', '\x34', '\x2', '\x2', '\xF2', '\xF3', '\a', '\x16', '\x2', '\x2', 
		'\xF3', '\xF4', '\x5', '\x12', '\n', '\x2', '\xF4', '\xF5', '\a', '\x17', 
		'\x2', '\x2', '\xF5', '\xF6', '\x5', '\x1C', '\xF', '\x2', '\xF6', '\xF8', 
		'\x3', '\x2', '\x2', '\x2', '\xF7', '\xF1', '\x3', '\x2', '\x2', '\x2', 
		'\xF7', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xFC', '\x3', '\x2', 
		'\x2', '\x2', '\xF9', '\xFB', '\x5', '\x1C', '\xF', '\x2', '\xFA', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\xFB', '\xFE', '\x3', '\x2', '\x2', '\x2', 
		'\xFC', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\x3', '\x2', 
		'\x2', '\x2', '\xFD', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFC', 
		'\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\a', '\x18', '\x2', '\x2', 
		'\x100', '\x101', '\x5', '\x12', '\n', '\x2', '\x101', '\x102', '\a', 
		'\x19', '\x2', '\x2', '\x102', '\x106', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\x104', '\a', '\x10', '\x2', '\x2', '\x104', '\x106', '\a', '\x34', '\x2', 
		'\x2', '\x105', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x105', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x108', '\x5', ' ', '\x11', '\x2', '\x108', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x109', '\x10B', '\a', '\x16', '\x2', '\x2', '\x10A', '\x10C', 
		'\x5', '\x10', '\t', '\x2', '\x10B', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x10D', '\x10E', '\a', '\x17', '\x2', '\x2', '\x10E', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\a', '\r', '\x2', 
		'\x2', '\x110', '\x111', '\x5', '$', '\x13', '\x2', '\x111', '#', '\x3', 
		'\x2', '\x2', '\x2', '\x112', '\x114', '\a', '\x16', '\x2', '\x2', '\x113', 
		'\x115', '\x5', '&', '\x14', '\x2', '\x114', '\x113', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x115', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', 
		'\x3', '\x2', '\x2', '\x2', '\x116', '\x117', '\a', '\x17', '\x2', '\x2', 
		'\x117', '\x118', '\x5', '\x4', '\x3', '\x2', '\x118', '\x119', '\a', 
		'\a', '\x2', '\x2', '\x119', '%', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x11D', '\x5', '\xE', '\b', '\x2', '\x11B', '\x11C', '\a', '\x12', '\x2', 
		'\x2', '\x11C', '\x11E', '\a', '\x1A', '\x2', '\x2', '\x11D', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		'\x11E', '\x121', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x121', '\a', 
		'\x1A', '\x2', '\x2', '\x120', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x120', 
		'\x11F', '\x3', '\x2', '\x2', '\x2', '\x121', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x122', '\x124', '\a', '\x1B', '\x2', '\x2', '\x123', '\x125', 
		'\x5', '*', '\x16', '\x2', '\x124', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x125', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x127', '\a', '\x1C', '\x2', '\x2', '\x127', 
		')', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12E', '\x5', ',', '\x17', 
		'\x2', '\x129', '\x12A', '\x5', '.', '\x18', '\x2', '\x12A', '\x12B', 
		'\x5', ',', '\x17', '\x2', '\x12B', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x130', '\x3', 
		'\x2', '\x2', '\x2', '\x12E', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12E', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x131', '\x133', 
		'\x5', '.', '\x18', '\x2', '\x132', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x133', '\x3', '\x2', '\x2', '\x2', '\x133', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x134', '\x135', '\a', '\x18', '\x2', '\x2', '\x135', '\x136', 
		'\x5', '\x12', '\n', '\x2', '\x136', '\x137', '\a', '\x19', '\x2', '\x2', 
		'\x137', '\x138', '\a', '\x4', '\x2', '\x2', '\x138', '\x139', '\x5', 
		'\x12', '\n', '\x2', '\x139', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x13B', '\a', '\x34', '\x2', '\x2', '\x13B', '\x13C', '\a', '\x4', '\x2', 
		'\x2', '\x13C', '\x13F', '\x5', '\x12', '\n', '\x2', '\x13D', '\x13F', 
		'\x5', '\x12', '\n', '\x2', '\x13E', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '\x13F', '-', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x141', '\t', '\x2', '\x2', '\x2', '\x141', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x142', '\x143', '\a', '\x1D', '\x2', '\x2', '\x143', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\a', '\x1E', '\x2', '\x2', 
		'\x145', '\x33', '\x3', '\x2', '\x2', '\x2', '\x146', '\x147', '\t', '\x3', 
		'\x2', '\x2', '\x147', '\x35', '\x3', '\x2', '\x2', '\x2', '\x148', '\x149', 
		'\a', '%', '\x2', '\x2', '\x149', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x14A', '\x14B', '\t', '\x4', '\x2', '\x2', '\x14B', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x14C', '\x14D', '\t', '\x5', '\x2', '\x2', '\x14D', ';', 
		'\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', '\t', '\x6', '\x2', '\x2', 
		'\x14F', '=', '\x3', '\x2', '\x2', '\x2', '\x150', '\x151', '\t', '\a', 
		'\x2', '\x2', '\x151', '?', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', 
		'\a', '\x33', '\x2', '\x2', '\x153', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x155', '\t', '\b', '\x2', '\x2', '\x155', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x156', '\x157', '\t', '\t', '\x2', '\x2', '\x157', '\x45', 
		'\x3', '\x2', '\x2', '\x2', ' ', 'L', 'P', 'n', 's', '\x83', '\x85', '\x89', 
		'\x8C', '\x93', '\x98', '\x9F', '\xA7', '\xAF', '\xBE', '\xD8', '\xDA', 
		'\xE1', '\xE8', '\xEF', '\xF7', '\xFC', '\x105', '\x10B', '\x114', '\x11D', 
		'\x120', '\x124', '\x12E', '\x132', '\x13E',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace _gen
